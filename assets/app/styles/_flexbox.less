// --------------------------------------------------
// Flexbox LESS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
// flex or inline-flex
.flex-display(@display: flex) {
	display: ~"-webkit-@{display}";
	display: ~"-moz-@{display}";
	display: ~"-ms-@{display}box"; // IE10
	display: ~"-ms-@{display}"; // IE11
	display: @display;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
.flex(@columns: initial) {
  -webkit-flex: @columns;
     -moz-flex: @columns;
      -ms-flex: @columns;
          flex: @columns;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
.flex-direction(@direction: row) {
  -webkit-flex-direction: @direction;
     -moz-flex-direction: @direction;
      -ms-flex-direction: @direction;
          flex-direction: @direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap: nowrap) {
  -webkit-flex-wrap: @wrap;
     -moz-flex-wrap: @wrap;
      -ms-flex-wrap: @wrap;
          flex-wrap: @wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
.flex-flow(@flow) {
  -webkit-flex-flow: @flow;
     -moz-flex-flow: @flow;
      -ms-flex-flow: @flow;
          flex-flow: @flow;
}

// Display Order
// - applies to: flex items
// <integer>
.flex-order(@order: 0) {
  -webkit-order: @order;
     -moz-order: @order;
      -ms-order: @order;
          order: @order;
}

// Flex grow factor
// - applies to: flex items
// <number>
.flex-grow(@grow: 0) {
  -webkit-flex-grow: @grow;
     -moz-flex-grow: @grow;
      -ms-flex-grow: @grow;
          flex-grow: @grow;
}

// Flex shr
// - applies to: flex itemsink factor
// <number> 
.flex-shrink(@shrink: 1) {
  -webkit-flex-shrink: @shrink;
     -moz-flex-shrink: @shrink;
      -ms-flex-shrink: @shrink;
          flex-shrink: @shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
.flex-basis(@width: auto) {
  -webkit-flex-basis: @width;
     -moz-flex-basis: @width;
      -ms-flex-basis: @width;
          flex-basis: @width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
.justify-content(@justify: flex-start) {
  -webkit-justify-content: @justify;
     -moz-justify-content: @justify;
      -ms-justify-content: @justify;
          justify-content: @justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
.align-content(@align: stretch) {
  -webkit-align-content: @align;
     -moz-align-content: @align;
      -ms-align-content: @align;
          align-content: @align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
.align-items(@align: stretch) {
  -webkit-align-items: @align;
     -moz-align-items: @align;
      -ms-align-items: @align;
          align-items: @align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
.align-self(@align: auto) {
  -webkit-align-self: @align;
     -moz-align-self: @align;
      -ms-align-self: @align;
          align-self: @align;
}




// Generic layout attr utils, inspired by Angular Material/Polymer flex layouts
// - TODO (bpeterse): Grunt autoprefixer should handle compatibility...check?
//
// - simple example:
//   <div layout row reverse align-items="center">
//      <div flex>foo</div>
//      <div layout column main-axis="center">
//        <div flex grow="2" shrink="2">bar</div>
//        <div>bar</div>
//      </div>
//      <div>Not flexed.</div>
//   </div>
//
[outline] {
  outline: 1px dotted #ED9AF2;
}
// flex container 
[layout] {
  display: flex; 
}
// flex child 
[flex] {
  flex: 1; 
}

// container modifiers 
[column] {
  flex-direction: column;
}

[column="reverse"],
[column][reverse] {
  flex-direction: column-reverse;
}

[row] {
  flex-direction: row;
}

[row="reverse"],
[row][reverse] {
  flex-direction: row-reverse;
}

[wrap] {
  flex-wrap: wrap;
}

[fit] {
  margin: 0px;
  width: 100%;
  min-height: auto;
  height: inherit; // 100%?
}

[basis="auto"] {
  flex-basis: auto; 
};

[align-items],
[align-items="center"] {
  align-items: center;
}

[align-items="start"] {
  align-items: flex-start;
}

[align-items="end"] {
  align-items: flex-end;
}

[align-items="baseline"] {
  align-items: baseline;
}

// main axis
[main-axis="start"] {
  justify-content: flex-start; 
}

[main-axis="end"] {
  justify-content: flex-end; 
}

[main-axis="center"] {
  justify-content: center; 
}

[main-axis="space-between"] {
  justify-content: space-between; 
}

[main-axis="space-around"] {
  justify-content: space-around; 
}

// cross axis
[cross-axis="start"] {
  align-items: flex-start; 
}

[cross-axis="end"] {
  align-items: flex-end; 
}

[cross-axis="center"] {
  align-items: center; 
}

[cross-axis="stretch"] {
  align-items: stretch; 
}

[cross-axis="baseline"] {
  align-items: baseline; 
}

// flex item modifiers

// flex grow, should have a flex shrink pairing
// should generate with a loop
[grow="0"] {
  flex-grow: 0;
}

[grow="1"] {
  flex-grow: 1;
}

[grow="2"] {
  flex-grow: 2;
}

[grow="3"] {
  flex-grow: 3;
}

[grow="4"] {
  flex-grow: 4;
}

[grow="5"] {
  flex-grow: 5;
}

[shrink="0"] {
  flex-shrink: 0;
}

[shrink="1"] {
  flex-shrink: 1;
}

[shrink="2"] {
  flex-shrink: 2;
}

[shrink="3"] {
  flex-shrink: 3;
}

[shrink="4"] {
  flex-shrink: 4;
}

[shrink="5"] {
  flex-shrink: 5;
}





