<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
export KUBECONFIG=.kubeconfig

# Build a kubeconfig for the local server using the service account token
SERVER=https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}
TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
oc config set-cluster local-cluster --server=$SERVER --insecure-skip-tls-verify=true
oc config set-credentials local-user --token=$TOKEN
oc config set-context local --cluster=local-cluster --user=local-user --namespace=$NAMESPACE
oc config use-context local


TEST_ENDPOINT=`oc get services -n test | grep frontend-test | awk '{print $4":"$5}'`

REGISTRY_ENDPOINT=`oc get services | grep docker-registry | awk '{print $4":"$5}'`

# clean up existing test deployment
set +e
echo "Removing old test deployment"
TEST_RC_ID=`oc get -n test replicationController | grep frontend-test | awk '{print $1}'`
if [ ! -z $TEST_RC_ID ]; then
  oc delete -n test replicationController $TEST_RC_ID
fi

TEST_POD_ID=`oc get pod -n test | grep frontend-test | awk '{print $1}'`
if [ ! -z $TEST_POD_ID ]; then
  oc delete pod -n test $TEST_POD_ID
fi
set -e

# wait for old pod to be torn down
sleep 5

# trigger a build
echo "Triggering new application build and deployment"
oc start-build -n test ruby-test-build

# check that the build test image deployed successfully
set +e
rc=1
count=0
attempts=100

echo "Checking test deployment at $TEST_ENDPOINT"
while [ $rc -ne 0 -a $count -lt $attempts ]; do
  curl -s --connect-timeout 2 $TEST_ENDPOINT
  rc=$?
  if [ $rc -ne 0 ]; then
    count=$(($count+1))
    echo "Attempt $count/$attempts"
    sleep 5
  fi
done
set -e

if [ $count -eq $attempts ]; then
    echo "Failed to reach test deployment"
    exit 1
fi


# Tag the image into production
echo "Test deployment succeeded, rolling out to production..."

COMMIT=`curl -s http://$REGISTRY_ENDPOINT/v1/repositories/test/origin-ruby-sample/tags/test`
curl -s -X PUT  http://$REGISTRY_ENDPOINT/v1/repositories/test/origin-ruby-sample/tags/prod -d "$COMMIT"
      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
