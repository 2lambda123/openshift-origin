apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: alertmanager
  annotations:
    "openshift.io/display-name": Alertmanager
    description: |
      Prometheus Alertmanager - alert on metrics from nodes, services, and the infrastructure.
    iconClass: icon-cogs
    tags: "monitoring,prometheus,time-series,alertmanager,alerts,alerting"
parameters:
- description: The namespace to instantiate Alertmanager under. Defaults to 'kube-system'.
  name: NAMESPACE
  value: kube-system
- description: The location of the proxy image
  name: IMAGE_PROXY
  value: registry.svc.ci.openshift.org/ci/oauth-proxy:latest
- description: The location of the Alertmanager image
  name: IMAGE_ALERTMANAGER
  value: quay.io/prometheus/alertmanager:latest
- description: The session secret for the proxy
  name: SESSION_SECRET
  generate: expression
  from: "[a-zA-Z0-9]{43}"
objects:
# Create an alertmanager service account to attach oauth redirection annotations to.
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: alertmanager
    namespace: "${NAMESPACE}"
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"alertmanager"}}'
# Create a fully end-to-end TLS connection to the proxy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: alertmanager
    tls:
      termination: Reencrypt
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/scheme: https
      service.alpha.openshift.io/serving-cert-secret-name: alertmanager-tls
    labels:
      name: alertmanager
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: alertmanager
      port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      app: alertmanager
- apiVersion: v1
  kind: Secret
  metadata:
    name: alertmanager-proxy
    namespace: "${NAMESPACE}"
  stringData:
    session_secret: "${SESSION_SECRET}="
# Deploy Alertmanager behind an oauth proxy
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: alertmanager
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: alertmanager
    template:
      metadata:
        labels:
          app: alertmanager
        name: alertmanager
      spec:
        serviceAccountName: alertmanager
        containers:
        - name: oauth-proxy
          image: ${IMAGE_PROXY}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8443
            name: web
          args:
          - -https-address=:8443
          - -email-domain=*
          - -client-id=system:serviceaccount:${NAMESPACE}:alertmanager
          - -upstream=http://localhost:9093
          - -provider=openshift
          - -redirect-url=https:///oauth2/callback
          - '-openshift-sar={"namespace": "${NAMESPACE}", "verb": "list", "resource": "services"}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          # TODO: Remove this once the oauth proxy supports better inter-service auth.
          # Currently this is needed for Prometheus to send alerts to Alertmanager.
          - -skip-auth-regex=^(/metrics|/api/v1/alerts)$
          volumeMounts:
          - mountPath: /etc/tls/private
            name: alertmanager-tls
          - mountPath: /etc/proxy/secrets
            name: secrets

        - name: alertmanager
          args:
          - -config.file=/etc/alertmanager/alertmanager.yml
          - -web.listen-address=localhost:9093
          image: ${IMAGE_ALERTMANAGER}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /etc/alertmanager
            name: config-volume
          - mountPath: /alertmanager
            name: data-volume

        # This sidecar watches for changes in the Alertmanager configuration and tells
        # Alertmanager to reload the configuration upon change.
        - name: watch
          image: weaveworks/watch:master-5b2a6e5
          imagePullPolicy: IfNotPresent
          args: ["-v", "-t", "-p=/etc/alertmanager", "curl", "-X", "POST", "--fail", "-o", "-", "-sS", "http://localhost:9093/-/reload"]
          volumeMounts:
          - name: config-volume
            mountPath: /etc/alertmanager

        restartPolicy: Always
        volumes:
        - configMap:
            defaultMode: 420
            name: alertmanager
          name: config-volume
        - name: secrets
          secret:
            secretName: alertmanager-proxy
        - name: alertmanager-tls
          secret:
            secretName: alertmanager-tls
        - emptyDir: {}
          name: data-volume
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: alertmanager
    namespace: "${NAMESPACE}"
  data:
    alertmanager.yml: |
      # A dummy Alertmanager configuration that doesn't send notifications anywhere.
      route:
        group_by: ['alertname']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        receiver: noop-receiver

      receivers:
      - name: noop-receiver
