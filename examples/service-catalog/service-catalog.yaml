apiVersion: v1
kind: Template
metadata:
  name: service-catalog
objects:

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: servicecatalog-serviceclass-viewer
  rules:
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterserviceclasses
    - clusterserviceplans
    verbs:
    - list
    - watch
    - get

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: servicecatalog-serviceclass-viewer-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    name: servicecatalog-serviceclass-viewer
    kind: ClusterRole
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:authenticated

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: service-catalog-controller

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: service-catalog-apiserver

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: sar-creator
  rules:
  - apiGroups:
    - ""
    resources:
    - subjectaccessreviews.authorization.k8s.io
    verbs:
    - create

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-sar-creator-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    name: sar-creator
    kind: ClusterRole
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: ${SERVICE_CATALOG_NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: namespace-viewer
  rules:
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - list
    - watch
    - get

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-namespace-viewer-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    name: namespace-viewer
    kind: ClusterRole
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: ${SERVICE_CATALOG_NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-controller-namespace-viewer-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    name: namespace-viewer
    kind: ClusterRole
  subjects:
  - kind: ServiceAccount
    name: service-catalog-controller
    namespace: ${SERVICE_CATALOG_NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: service-catalog-controller
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - create
    - update
    - patch
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterservicebrokers/status
    - clusterserviceclasses/status
    - clusterserviceplans/status
    - serviceinstances/status
    - servicebindings/status
    - servicebindings/finalizers
    - serviceinstances/reference
    verbs:
    - update
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterservicebrokers
    - serviceinstances
    - servicebindings
    verbs:
    - list
    - get
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - patch
    - create
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterserviceclasses
    - clusterserviceplans
    verbs:
    - create
    - delete
    - update
    - patch
    - get
    - list
    - watch
  - apiGroups:
    - settings.k8s.io
    resources:
    - podpresets
    verbs:
    - create
    - update
    - delete
    - get
    - list
    - watch

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-controller-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    name: service-catalog-controller
    kind: ClusterRole
  subjects:
  - kind: ServiceAccount
    name: service-catalog-controller
    namespace: ${SERVICE_CATALOG_NAMESPACE}
  
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    name: endpoint-accessor
    namespace: ${SERVICE_CATALOG_NAMESPACE}
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - list
    - watch
    - get
    - create
    - update

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: endpointer-accessor-binding
    namespace: ${SERVICE_CATALOG_NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    name: endpoint-accessor
    kind: Role
  subjects:
  - kind: ServiceAccount
    namespace: ${SERVICE_CATALOG_NAMESPACE}
    name: service-catalog-controller

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: extension-apiserver-authentication-reader-binding
    namespace: ${KUBE_SYSTEM_NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: ${SERVICE_CATALOG_NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: system:auth-delegator-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    name: system:auth-delegator
    kind: ClusterRole
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: ${SERVICE_CATALOG_NAMESPACE}


- kind: Deployment
  apiVersion: extensions/v1beta1
  metadata:
    labels:
      app: apiserver
    name: apiserver
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: apiserver
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: apiserver
      spec:
        serviceAccountName: service-catalog-apiserver
        containers:
        - command: 
          - service-catalog
          args:
          - apiserver
          - --admission-control
          - KubernetesNamespaceLifecycle,DefaultServicePlan,ServiceBindingsLifecycle,ServicePlanChangeValidator,BrokerAuthSarCheck
          - --storage-type
          - etcd
          - --secure-port
          - "6443"
          - --etcd-servers
          - http://localhost:2379
          - -v
          - "10"
          - --cors-allowed-origins
          - ${CORS_ALLOWED_ORIGIN}
          - --feature-gates
          - OriginatingIdentity=true
          image: ${SERVICE_CATALOG_IMAGE}
          imagePullPolicy: IfNotPresent
          name: apiserver
          ports:
          - containerPort: 6443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/run/kubernetes-service-catalog
            name: apiserver-ssl
            readOnly: true
        - env:
          - name: ETCD_DATA_DIR
            value: /data-dir
          image: quay.io/coreos/etcd
          imagePullPolicy: IfNotPresent
          name: etcd
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /data-dir
            name: data-dir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: apiserver-ssl
          secret:
            defaultMode: 420
            secretName: apiserver-ssl
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
        - emptyDir: {}
          name: data-dir

- kind: Service
  apiVersion: v1
  metadata:
    name: apiserver
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: 'apiserver-ssl'
  spec:
    type: ClusterIP
    clusterIP: ${SERVICE_CATALOG_SERVICE_IP}
    ports:
    - name: secure
      port: 443
      protocol: TCP
      targetPort: 6443
    selector:
      app: apiserver
    sessionAffinity: None

- kind: Deployment
  apiVersion: extensions/v1beta1
  metadata:
    labels:
      app: controller-manager
    name: controller-manager
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: controller-manager
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: controller-manager
      spec:
        serviceAccountName: service-catalog-controller
        containers:
        - command: 
          - service-catalog
          args:
          - controller-manager
          - -v
          - "5"
          - --leader-election-namespace
          - kube-service-catalog
          - --broker-relist-interval
          - "5m"
          - --feature-gates
          - OriginatingIdentity=true
          image: ${SERVICE_CATALOG_IMAGE}
          imagePullPolicy: IfNotPresent
          name: controller-manager
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /etc/service-catalog-ssl
            name: service-catalog-ssl
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: service-catalog-ssl
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: apiserver.crt
            secretName: apiserver-ssl
- kind: Service
  apiVersion: v1
  metadata:
    name: controller-manager
  spec:
    ports:
    - port: 6443
      protocol: TCP
      targetPort: 6443
    selector:
      app: controller-manager
    sessionAffinity: None
    type: ClusterIP

parameters:
- description: CORS allowed origin for the API server, if you need to specify multiple modify the Deployment after creation
  displayName: CORS Allowed Origin
  name: CORS_ALLOWED_ORIGIN
  required: true
  value: 10.192.213.116
- description: Name of the service catalog image to use for apiserver and controller-manager
  displayName: Service catalog image name
  name: SERVICE_CATALOG_IMAGE
  required: true
  value: openshift/origin-service-catalog:latest
- description: Cluster ip address for the service catalog service
  displayName: Service Catalog Service IP
  name: SERVICE_CATALOG_SERVICE_IP
  required: true
  value: 172.30.1.2
- description: Do not change this value.
  displayName: Name of the kube-system namespace
  name: KUBE_SYSTEM_NAMESPACE
  required: true
  value: kube-system
- description: Do not change this value.
  displayName: Name of the service catalog namespace
  name: SERVICE_CATALOG_NAMESPACE
  required: true
  value: kube-service-catalog
