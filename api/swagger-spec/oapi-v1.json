{
  "swaggerVersion": "1.2",
  "apiVersion": "v1",
  "basePath": "https://127.0.0.1:8443",
  "resourcePath": "/oapi/v1",
  "info": {
   "title": "OpenShift v1 REST API",
   "description": "The OpenShift API exposes operations for managing an enterprise Kubernetes cluster, including security and user management, application deployments, image and source builds, HTTP(s) routing, and project management."
  },
  "apis": [
   {
    "path": "/oapi/v1/namespaces/{namespace}/buildconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildConfigList",
      "method": "GET",
      "summary": "list or watch objects of kind BuildConfig",
      "nickname": "listNamespacedBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildConfigList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.BuildConfig",
      "method": "POST",
      "summary": "create a BuildConfig",
      "nickname": "createNamespacedBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.BuildConfig",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/buildconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of BuildConfig",
      "nickname": "watchNamespacedBuildConfigList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/buildconfigs/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildConfig",
      "method": "GET",
      "summary": "read the specified BuildConfig",
      "nickname": "readNamespacedBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.BuildConfig",
      "method": "PUT",
      "summary": "replace the specified BuildConfig",
      "nickname": "replaceNamespacedBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.BuildConfig",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.BuildConfig",
      "method": "PATCH",
      "summary": "partially update the specified BuildConfig",
      "nickname": "patchNamespacedBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a BuildConfig",
      "nickname": "deleteNamespacedBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/buildconfigs/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind BuildConfig",
      "nickname": "watchNamespacedBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/buildconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildConfigList",
      "method": "GET",
      "summary": "list or watch objects of kind BuildConfig",
      "nickname": "listBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildConfigList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.BuildConfig",
      "method": "POST",
      "summary": "create a BuildConfig",
      "nickname": "createBuildConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.BuildConfig",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/buildconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of BuildConfig",
      "nickname": "watchBuildConfigList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/instantiate",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildRequest",
      "method": "POST",
      "summary": "create instantiate of a BuildRequest",
      "nickname": "createNamespacedBuildRequestInstantiate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.BuildRequest",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildRequest",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildRequest"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "string",
      "method": "POST",
      "summary": "connect POST requests to webhooks of Status",
      "nickname": "connectPostNamespacedStatusWebhooks",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "path",
        "description": "URL path to use in proxy request to pod",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Status",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks/{path:*}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "string",
      "method": "POST",
      "summary": "connect POST requests to webhooks of Status",
      "nickname": "connectPostNamespacedStatusWebhooks",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "path",
        "description": "URL path to use in proxy request to pod",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Status",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "path:*",
        "description": "path to the resource",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/builds",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildList",
      "method": "GET",
      "summary": "list or watch objects of kind Build",
      "nickname": "listNamespacedBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Build",
      "method": "POST",
      "summary": "create a Build",
      "nickname": "createNamespacedBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Build",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Build"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/builds",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Build",
      "nickname": "watchNamespacedBuildList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/builds/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Build",
      "method": "GET",
      "summary": "read the specified Build",
      "nickname": "readNamespacedBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Build",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Build"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Build",
      "method": "PUT",
      "summary": "replace the specified Build",
      "nickname": "replaceNamespacedBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Build",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Build",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Build"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Build",
      "method": "PATCH",
      "summary": "partially update the specified Build",
      "nickname": "patchNamespacedBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Build",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Build"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Build",
      "nickname": "deleteNamespacedBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Build",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/builds/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind Build",
      "nickname": "watchNamespacedBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Build",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/builds",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildList",
      "method": "GET",
      "summary": "list or watch objects of kind Build",
      "nickname": "listBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Build",
      "method": "POST",
      "summary": "create a Build",
      "nickname": "createBuild",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Build",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Build"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/builds",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Build",
      "nickname": "watchBuildList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/builds/{name}/clone",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildRequest",
      "method": "POST",
      "summary": "create clone of a BuildRequest",
      "nickname": "createNamespacedBuildRequestClone",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.BuildRequest",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildRequest",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildRequest"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/builds/{name}/log",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.BuildLog",
      "method": "GET",
      "summary": "read log of the specified BuildLog",
      "nickname": "readNamespacedBuildLogLog",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "follow",
        "description": "if true indicates that the log should be streamed; defaults to false",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "nowait",
        "description": "if true indicates that the server should not wait for a log to be available before returning; defaults to false",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the BuildLog",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.BuildLog"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusternetworks",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterNetworkList",
      "method": "GET",
      "summary": "list or watch objects of kind ClusterNetwork",
      "nickname": "listNamespacedClusterNetwork",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterNetworkList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterNetwork",
      "method": "POST",
      "summary": "create a ClusterNetwork",
      "nickname": "createNamespacedClusterNetwork",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterNetwork",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterNetwork"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/clusternetworks",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of ClusterNetwork",
      "nickname": "watchNamespacedClusterNetworkList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusternetworks/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterNetwork",
      "method": "GET",
      "summary": "read the specified ClusterNetwork",
      "nickname": "readNamespacedClusterNetwork",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterNetwork",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterNetwork"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterNetwork",
      "method": "PUT",
      "summary": "replace the specified ClusterNetwork",
      "nickname": "replaceNamespacedClusterNetwork",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterNetwork",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterNetwork",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterNetwork"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterNetwork",
      "method": "PATCH",
      "summary": "partially update the specified ClusterNetwork",
      "nickname": "patchNamespacedClusterNetwork",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterNetwork",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterNetwork"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a ClusterNetwork",
      "nickname": "deleteNamespacedClusterNetwork",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterNetwork",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/clusternetworks/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind ClusterNetwork",
      "nickname": "watchNamespacedClusterNetwork",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterNetwork",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterpolicies",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterPolicyList",
      "method": "GET",
      "summary": "list or watch objects of kind ClusterPolicy",
      "nickname": "listNamespacedClusterPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicyList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterPolicy",
      "method": "POST",
      "summary": "create a ClusterPolicy",
      "nickname": "createNamespacedClusterPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterPolicy",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/clusterpolicies",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of ClusterPolicy",
      "nickname": "watchNamespacedClusterPolicyList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterpolicies/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterPolicy",
      "method": "GET",
      "summary": "read the specified ClusterPolicy",
      "nickname": "readNamespacedClusterPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterPolicy",
      "method": "PUT",
      "summary": "replace the specified ClusterPolicy",
      "nickname": "replaceNamespacedClusterPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterPolicy",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterPolicy",
      "method": "PATCH",
      "summary": "partially update the specified ClusterPolicy",
      "nickname": "patchNamespacedClusterPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a ClusterPolicy",
      "nickname": "deleteNamespacedClusterPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/clusterpolicies/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind ClusterPolicy",
      "nickname": "watchNamespacedClusterPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterpolicybindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterPolicyBindingList",
      "method": "GET",
      "summary": "list or watch objects of kind ClusterPolicyBinding",
      "nickname": "listNamespacedClusterPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicyBindingList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterPolicyBinding",
      "method": "POST",
      "summary": "create a ClusterPolicyBinding",
      "nickname": "createNamespacedClusterPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterPolicyBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/clusterpolicybindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of ClusterPolicyBinding",
      "nickname": "watchNamespacedClusterPolicyBindingList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterpolicybindings/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterPolicyBinding",
      "method": "GET",
      "summary": "read the specified ClusterPolicyBinding",
      "nickname": "readNamespacedClusterPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterPolicyBinding",
      "method": "PUT",
      "summary": "replace the specified ClusterPolicyBinding",
      "nickname": "replaceNamespacedClusterPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterPolicyBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterPolicyBinding",
      "method": "PATCH",
      "summary": "partially update the specified ClusterPolicyBinding",
      "nickname": "patchNamespacedClusterPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterPolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a ClusterPolicyBinding",
      "nickname": "deleteNamespacedClusterPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/clusterpolicybindings/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind ClusterPolicyBinding",
      "nickname": "watchNamespacedClusterPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterPolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterrolebindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterRoleBindingList",
      "method": "GET",
      "summary": "list objects of kind ClusterRoleBinding",
      "nickname": "listNamespacedClusterRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRoleBindingList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterRoleBinding",
      "method": "POST",
      "summary": "create a ClusterRoleBinding",
      "nickname": "createNamespacedClusterRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterRoleBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterrolebindings/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterRoleBinding",
      "method": "GET",
      "summary": "read the specified ClusterRoleBinding",
      "nickname": "readNamespacedClusterRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterRoleBinding",
      "method": "PUT",
      "summary": "replace the specified ClusterRoleBinding",
      "nickname": "replaceNamespacedClusterRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterRoleBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterRoleBinding",
      "method": "PATCH",
      "summary": "partially update the specified ClusterRoleBinding",
      "nickname": "patchNamespacedClusterRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a ClusterRoleBinding",
      "nickname": "deleteNamespacedClusterRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterroles",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterRoleList",
      "method": "GET",
      "summary": "list objects of kind ClusterRole",
      "nickname": "listNamespacedClusterRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRoleList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterRole",
      "method": "POST",
      "summary": "create a ClusterRole",
      "nickname": "createNamespacedClusterRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterRole",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRole"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/clusterroles/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ClusterRole",
      "method": "GET",
      "summary": "read the specified ClusterRole",
      "nickname": "readNamespacedClusterRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRole",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRole"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterRole",
      "method": "PUT",
      "summary": "replace the specified ClusterRole",
      "nickname": "replaceNamespacedClusterRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ClusterRole",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRole",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRole"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ClusterRole",
      "method": "PATCH",
      "summary": "partially update the specified ClusterRole",
      "nickname": "patchNamespacedClusterRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRole",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ClusterRole"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a ClusterRole",
      "nickname": "deleteNamespacedClusterRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ClusterRole",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/deploymentconfigrollbacks",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.DeploymentConfigRollback",
      "method": "POST",
      "summary": "create a DeploymentConfigRollback",
      "nickname": "createNamespacedDeploymentConfigRollback",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeploymentConfigRollback",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfigRollback"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/deploymentconfigrollbacks",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.DeploymentConfigRollback",
      "method": "POST",
      "summary": "create a DeploymentConfigRollback",
      "nickname": "createDeploymentConfigRollback",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeploymentConfigRollback",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfigRollback"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/deploymentconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.DeploymentConfigList",
      "method": "GET",
      "summary": "list or watch objects of kind DeploymentConfig",
      "nickname": "listNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfigList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.DeploymentConfig",
      "method": "POST",
      "summary": "create a DeploymentConfig",
      "nickname": "createNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeploymentConfig",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/deploymentconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of DeploymentConfig",
      "nickname": "watchNamespacedDeploymentConfigList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.DeploymentConfig",
      "method": "GET",
      "summary": "read the specified DeploymentConfig",
      "nickname": "readNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the DeploymentConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.DeploymentConfig",
      "method": "PUT",
      "summary": "replace the specified DeploymentConfig",
      "nickname": "replaceNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeploymentConfig",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the DeploymentConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.DeploymentConfig",
      "method": "PATCH",
      "summary": "partially update the specified DeploymentConfig",
      "nickname": "patchNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the DeploymentConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a DeploymentConfig",
      "nickname": "deleteNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the DeploymentConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/deploymentconfigs/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind DeploymentConfig",
      "nickname": "watchNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the DeploymentConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/deploymentconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.DeploymentConfigList",
      "method": "GET",
      "summary": "list or watch objects of kind DeploymentConfig",
      "nickname": "listDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfigList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.DeploymentConfig",
      "method": "POST",
      "summary": "create a DeploymentConfig",
      "nickname": "createDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeploymentConfig",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/deploymentconfigs",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of DeploymentConfig",
      "nickname": "watchDeploymentConfigList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/generatedeploymentconfigs/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.DeploymentConfig",
      "method": "GET",
      "summary": "read the specified DeploymentConfig",
      "nickname": "readNamespacedDeploymentConfig",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the DeploymentConfig",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.DeploymentConfig"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/groups",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.GroupList",
      "method": "GET",
      "summary": "list or watch objects of kind Group",
      "nickname": "listNamespacedGroup",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.GroupList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Group",
      "method": "POST",
      "summary": "create a Group",
      "nickname": "createNamespacedGroup",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Group",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Group"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/groups",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Group",
      "nickname": "watchNamespacedGroupList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/groups/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Group",
      "method": "GET",
      "summary": "read the specified Group",
      "nickname": "readNamespacedGroup",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Group",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Group"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Group",
      "method": "PUT",
      "summary": "replace the specified Group",
      "nickname": "replaceNamespacedGroup",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Group",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Group",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Group"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Group",
      "method": "PATCH",
      "summary": "partially update the specified Group",
      "nickname": "patchNamespacedGroup",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Group",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Group"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Group",
      "nickname": "deleteNamespacedGroup",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Group",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/groups/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind Group",
      "nickname": "watchNamespacedGroup",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Group",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/hostsubnets",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.HostSubnetList",
      "method": "GET",
      "summary": "list or watch objects of kind HostSubnet",
      "nickname": "listNamespacedHostSubnet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.HostSubnetList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.HostSubnet",
      "method": "POST",
      "summary": "create a HostSubnet",
      "nickname": "createNamespacedHostSubnet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.HostSubnet",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.HostSubnet"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/hostsubnets",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of HostSubnet",
      "nickname": "watchNamespacedHostSubnetList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/hostsubnets/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.HostSubnet",
      "method": "GET",
      "summary": "read the specified HostSubnet",
      "nickname": "readNamespacedHostSubnet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the HostSubnet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.HostSubnet"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.HostSubnet",
      "method": "PUT",
      "summary": "replace the specified HostSubnet",
      "nickname": "replaceNamespacedHostSubnet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.HostSubnet",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the HostSubnet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.HostSubnet"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.HostSubnet",
      "method": "PATCH",
      "summary": "partially update the specified HostSubnet",
      "nickname": "patchNamespacedHostSubnet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the HostSubnet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.HostSubnet"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a HostSubnet",
      "nickname": "deleteNamespacedHostSubnet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the HostSubnet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/hostsubnets/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind HostSubnet",
      "nickname": "watchNamespacedHostSubnet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the HostSubnet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/identities",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.IdentityList",
      "method": "GET",
      "summary": "list or watch objects of kind Identity",
      "nickname": "listNamespacedIdentity",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.IdentityList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Identity",
      "method": "POST",
      "summary": "create a Identity",
      "nickname": "createNamespacedIdentity",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Identity",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Identity"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/identities",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Identity",
      "nickname": "watchNamespacedIdentityList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/identities/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Identity",
      "method": "GET",
      "summary": "read the specified Identity",
      "nickname": "readNamespacedIdentity",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Identity",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Identity"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Identity",
      "method": "PUT",
      "summary": "replace the specified Identity",
      "nickname": "replaceNamespacedIdentity",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Identity",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Identity",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Identity"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Identity",
      "method": "PATCH",
      "summary": "partially update the specified Identity",
      "nickname": "patchNamespacedIdentity",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Identity",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Identity"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Identity",
      "nickname": "deleteNamespacedIdentity",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Identity",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/identities/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind Identity",
      "nickname": "watchNamespacedIdentity",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Identity",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/images",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageList",
      "method": "GET",
      "summary": "list or watch objects of kind Image",
      "nickname": "listNamespacedImage",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Image",
      "method": "POST",
      "summary": "create a Image",
      "nickname": "createNamespacedImage",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Image",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Image"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/images",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Image",
      "nickname": "watchNamespacedImageList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/images/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Image",
      "method": "GET",
      "summary": "read the specified Image",
      "nickname": "readNamespacedImage",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Image",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Image"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Image",
      "nickname": "deleteNamespacedImage",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Image",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/images/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind Image",
      "nickname": "watchNamespacedImage",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Image",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/imagestreamimages/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStreamImage",
      "method": "GET",
      "summary": "read the specified ImageStreamImage",
      "nickname": "readNamespacedImageStreamImage",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStreamImage",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStreamImage"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/imagestreammappings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStreamMapping",
      "method": "POST",
      "summary": "create a ImageStreamMapping",
      "nickname": "createNamespacedImageStreamMapping",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ImageStreamMapping",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStreamMapping"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/imagestreammappings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStreamMapping",
      "method": "POST",
      "summary": "create a ImageStreamMapping",
      "nickname": "createImageStreamMapping",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ImageStreamMapping",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStreamMapping"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/imagestreams",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStreamList",
      "method": "GET",
      "summary": "list or watch objects of kind ImageStream",
      "nickname": "listNamespacedImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStreamList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ImageStream",
      "method": "POST",
      "summary": "create a ImageStream",
      "nickname": "createNamespacedImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ImageStream",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStream"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/imagestreams",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of ImageStream",
      "nickname": "watchNamespacedImageStreamList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/imagestreams/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStream",
      "method": "GET",
      "summary": "read the specified ImageStream",
      "nickname": "readNamespacedImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStream",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStream"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ImageStream",
      "method": "PUT",
      "summary": "replace the specified ImageStream",
      "nickname": "replaceNamespacedImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ImageStream",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStream",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStream"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ImageStream",
      "method": "PATCH",
      "summary": "partially update the specified ImageStream",
      "nickname": "patchNamespacedImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStream",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStream"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a ImageStream",
      "nickname": "deleteNamespacedImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStream",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/imagestreams/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind ImageStream",
      "nickname": "watchNamespacedImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStream",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/imagestreams",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStreamList",
      "method": "GET",
      "summary": "list or watch objects of kind ImageStream",
      "nickname": "listImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStreamList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ImageStream",
      "method": "POST",
      "summary": "create a ImageStream",
      "nickname": "createImageStream",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ImageStream",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStream"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/imagestreams",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of ImageStream",
      "nickname": "watchImageStreamList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/imagestreams/{name}/status",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStream",
      "method": "PUT",
      "summary": "replace status of the specified ImageStream",
      "nickname": "replaceNamespacedImageStreamStatus",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ImageStream",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStream",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStream"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/imagestreamtags/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ImageStreamTag",
      "method": "GET",
      "summary": "read the specified ImageStreamTag",
      "nickname": "readNamespacedImageStreamTag",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStreamTag",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ImageStreamTag"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a ImageStreamTag",
      "nickname": "deleteNamespacedImageStreamTag",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ImageStreamTag",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/netnamespaces",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.NetNamespaceList",
      "method": "GET",
      "summary": "list or watch objects of kind NetNamespace",
      "nickname": "listNamespacedNetNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.NetNamespaceList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.NetNamespace",
      "method": "POST",
      "summary": "create a NetNamespace",
      "nickname": "createNamespacedNetNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.NetNamespace",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.NetNamespace"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/netnamespaces",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of NetNamespace",
      "nickname": "watchNamespacedNetNamespaceList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/netnamespaces/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.NetNamespace",
      "method": "GET",
      "summary": "read the specified NetNamespace",
      "nickname": "readNamespacedNetNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the NetNamespace",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.NetNamespace"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.NetNamespace",
      "method": "PUT",
      "summary": "replace the specified NetNamespace",
      "nickname": "replaceNamespacedNetNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.NetNamespace",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the NetNamespace",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.NetNamespace"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.NetNamespace",
      "method": "PATCH",
      "summary": "partially update the specified NetNamespace",
      "nickname": "patchNamespacedNetNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the NetNamespace",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.NetNamespace"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a NetNamespace",
      "nickname": "deleteNamespacedNetNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the NetNamespace",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/netnamespaces/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind NetNamespace",
      "nickname": "watchNamespacedNetNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the NetNamespace",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthaccesstokens",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthAccessTokenList",
      "method": "GET",
      "summary": "list objects of kind OAuthAccessToken",
      "nickname": "listNamespacedOAuthAccessToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthAccessTokenList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthAccessToken",
      "method": "POST",
      "summary": "create a OAuthAccessToken",
      "nickname": "createNamespacedOAuthAccessToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.OAuthAccessToken",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthAccessToken"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthaccesstokens/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthAccessToken",
      "method": "GET",
      "summary": "read the specified OAuthAccessToken",
      "nickname": "readNamespacedOAuthAccessToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthAccessToken",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthAccessToken"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a OAuthAccessToken",
      "nickname": "deleteNamespacedOAuthAccessToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthAccessToken",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthauthorizetokens",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthAuthorizeTokenList",
      "method": "GET",
      "summary": "list objects of kind OAuthAuthorizeToken",
      "nickname": "listNamespacedOAuthAuthorizeToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthAuthorizeTokenList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthAuthorizeToken",
      "method": "POST",
      "summary": "create a OAuthAuthorizeToken",
      "nickname": "createNamespacedOAuthAuthorizeToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.OAuthAuthorizeToken",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthAuthorizeToken"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthauthorizetokens/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthAuthorizeToken",
      "method": "GET",
      "summary": "read the specified OAuthAuthorizeToken",
      "nickname": "readNamespacedOAuthAuthorizeToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthAuthorizeToken",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthAuthorizeToken"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a OAuthAuthorizeToken",
      "nickname": "deleteNamespacedOAuthAuthorizeToken",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthAuthorizeToken",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthclientauthorizations",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthClientAuthorizationList",
      "method": "GET",
      "summary": "list or watch objects of kind OAuthClientAuthorization",
      "nickname": "listNamespacedOAuthClientAuthorization",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClientAuthorizationList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthClientAuthorization",
      "method": "POST",
      "summary": "create a OAuthClientAuthorization",
      "nickname": "createNamespacedOAuthClientAuthorization",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.OAuthClientAuthorization",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClientAuthorization"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/oauthclientauthorizations",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of OAuthClientAuthorization",
      "nickname": "watchNamespacedOAuthClientAuthorizationList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthclientauthorizations/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthClientAuthorization",
      "method": "GET",
      "summary": "read the specified OAuthClientAuthorization",
      "nickname": "readNamespacedOAuthClientAuthorization",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClientAuthorization",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClientAuthorization"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthClientAuthorization",
      "method": "PUT",
      "summary": "replace the specified OAuthClientAuthorization",
      "nickname": "replaceNamespacedOAuthClientAuthorization",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.OAuthClientAuthorization",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClientAuthorization",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClientAuthorization"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthClientAuthorization",
      "method": "PATCH",
      "summary": "partially update the specified OAuthClientAuthorization",
      "nickname": "patchNamespacedOAuthClientAuthorization",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClientAuthorization",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClientAuthorization"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a OAuthClientAuthorization",
      "nickname": "deleteNamespacedOAuthClientAuthorization",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClientAuthorization",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/oauthclientauthorizations/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind OAuthClientAuthorization",
      "nickname": "watchNamespacedOAuthClientAuthorization",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClientAuthorization",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthclients",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthClientList",
      "method": "GET",
      "summary": "list or watch objects of kind OAuthClient",
      "nickname": "listNamespacedOAuthClient",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClientList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthClient",
      "method": "POST",
      "summary": "create a OAuthClient",
      "nickname": "createNamespacedOAuthClient",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.OAuthClient",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClient"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/oauthclients",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of OAuthClient",
      "nickname": "watchNamespacedOAuthClientList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/oauthclients/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.OAuthClient",
      "method": "GET",
      "summary": "read the specified OAuthClient",
      "nickname": "readNamespacedOAuthClient",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClient",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClient"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthClient",
      "method": "PUT",
      "summary": "replace the specified OAuthClient",
      "nickname": "replaceNamespacedOAuthClient",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.OAuthClient",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClient",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClient"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.OAuthClient",
      "method": "PATCH",
      "summary": "partially update the specified OAuthClient",
      "nickname": "patchNamespacedOAuthClient",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClient",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.OAuthClient"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a OAuthClient",
      "nickname": "deleteNamespacedOAuthClient",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClient",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/oauthclients/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind OAuthClient",
      "nickname": "watchNamespacedOAuthClient",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the OAuthClient",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/policies",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.PolicyList",
      "method": "GET",
      "summary": "list or watch objects of kind Policy",
      "nickname": "listNamespacedPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Policy",
      "method": "POST",
      "summary": "create a Policy",
      "nickname": "createNamespacedPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Policy",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Policy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/policies",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Policy",
      "nickname": "watchNamespacedPolicyList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/policies/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Policy",
      "method": "GET",
      "summary": "read the specified Policy",
      "nickname": "readNamespacedPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Policy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Policy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Policy",
      "method": "PUT",
      "summary": "replace the specified Policy",
      "nickname": "replaceNamespacedPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Policy",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Policy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Policy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Policy",
      "method": "PATCH",
      "summary": "partially update the specified Policy",
      "nickname": "patchNamespacedPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Policy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Policy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Policy",
      "nickname": "deleteNamespacedPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Policy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/policies/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind Policy",
      "nickname": "watchNamespacedPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Policy",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/policies",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.PolicyList",
      "method": "GET",
      "summary": "list or watch objects of kind Policy",
      "nickname": "listPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Policy",
      "method": "POST",
      "summary": "create a Policy",
      "nickname": "createPolicy",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Policy",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Policy"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/policies",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Policy",
      "nickname": "watchPolicyList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/policybindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.PolicyBindingList",
      "method": "GET",
      "summary": "list or watch objects of kind PolicyBinding",
      "nickname": "listNamespacedPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyBindingList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.PolicyBinding",
      "method": "POST",
      "summary": "create a PolicyBinding",
      "nickname": "createNamespacedPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.PolicyBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/policybindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of PolicyBinding",
      "nickname": "watchNamespacedPolicyBindingList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/policybindings/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.PolicyBinding",
      "method": "GET",
      "summary": "read the specified PolicyBinding",
      "nickname": "readNamespacedPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the PolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.PolicyBinding",
      "method": "PUT",
      "summary": "replace the specified PolicyBinding",
      "nickname": "replaceNamespacedPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.PolicyBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the PolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.PolicyBinding",
      "method": "PATCH",
      "summary": "partially update the specified PolicyBinding",
      "nickname": "patchNamespacedPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the PolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a PolicyBinding",
      "nickname": "deleteNamespacedPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the PolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/policybindings/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind PolicyBinding",
      "nickname": "watchNamespacedPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the PolicyBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/policybindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.PolicyBindingList",
      "method": "GET",
      "summary": "list or watch objects of kind PolicyBinding",
      "nickname": "listPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyBindingList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.PolicyBinding",
      "method": "POST",
      "summary": "create a PolicyBinding",
      "nickname": "createPolicyBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.PolicyBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.PolicyBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/policybindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of PolicyBinding",
      "nickname": "watchPolicyBindingList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/processedtemplates",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Template",
      "method": "POST",
      "summary": "create a Template",
      "nickname": "createNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Template",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Template"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/processedtemplates",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Template",
      "method": "POST",
      "summary": "create a Template",
      "nickname": "createTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Template",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Template"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/projectrequests",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Status",
      "method": "GET",
      "summary": "list objects of kind ProjectRequest",
      "nickname": "listNamespacedProjectRequest",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.ProjectRequest",
      "method": "POST",
      "summary": "create a ProjectRequest",
      "nickname": "createNamespacedProjectRequest",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ProjectRequest",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ProjectRequest"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/projects",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ProjectList",
      "method": "GET",
      "summary": "list objects of kind Project",
      "nickname": "listNamespacedProject",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ProjectList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Project",
      "method": "POST",
      "summary": "create a Project",
      "nickname": "createNamespacedProject",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Project",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Project"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/projects/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Project",
      "method": "GET",
      "summary": "read the specified Project",
      "nickname": "readNamespacedProject",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Project",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Project"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Project",
      "method": "PUT",
      "summary": "replace the specified Project",
      "nickname": "replaceNamespacedProject",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Project",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Project",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Project"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Project",
      "method": "PATCH",
      "summary": "partially update the specified Project",
      "nickname": "patchNamespacedProject",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Project",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Project"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Project",
      "nickname": "deleteNamespacedProject",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Project",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/resourceaccessreviews",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ResourceAccessReview",
      "method": "POST",
      "summary": "create a ResourceAccessReview",
      "nickname": "createNamespacedResourceAccessReview",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ResourceAccessReview",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ResourceAccessReview"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/resourceaccessreviews",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.ResourceAccessReview",
      "method": "POST",
      "summary": "create a ResourceAccessReview",
      "nickname": "createResourceAccessReview",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.ResourceAccessReview",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.ResourceAccessReview"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/rolebindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.RoleBindingList",
      "method": "GET",
      "summary": "list objects of kind RoleBinding",
      "nickname": "listNamespacedRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleBindingList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.RoleBinding",
      "method": "POST",
      "summary": "create a RoleBinding",
      "nickname": "createNamespacedRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.RoleBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/rolebindings/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.RoleBinding",
      "method": "GET",
      "summary": "read the specified RoleBinding",
      "nickname": "readNamespacedRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the RoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.RoleBinding",
      "method": "PUT",
      "summary": "replace the specified RoleBinding",
      "nickname": "replaceNamespacedRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.RoleBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the RoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.RoleBinding",
      "method": "PATCH",
      "summary": "partially update the specified RoleBinding",
      "nickname": "patchNamespacedRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the RoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a RoleBinding",
      "nickname": "deleteNamespacedRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the RoleBinding",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/rolebindings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.RoleBindingList",
      "method": "GET",
      "summary": "list objects of kind RoleBinding",
      "nickname": "listRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleBindingList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.RoleBinding",
      "method": "POST",
      "summary": "create a RoleBinding",
      "nickname": "createRoleBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.RoleBinding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleBinding"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/roles",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.RoleList",
      "method": "GET",
      "summary": "list objects of kind Role",
      "nickname": "listNamespacedRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Role",
      "method": "POST",
      "summary": "create a Role",
      "nickname": "createNamespacedRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Role",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Role"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/roles/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Role",
      "method": "GET",
      "summary": "read the specified Role",
      "nickname": "readNamespacedRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Role",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Role"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Role",
      "method": "PUT",
      "summary": "replace the specified Role",
      "nickname": "replaceNamespacedRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Role",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Role",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Role"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Role",
      "method": "PATCH",
      "summary": "partially update the specified Role",
      "nickname": "patchNamespacedRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Role",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Role"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Role",
      "nickname": "deleteNamespacedRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Role",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/roles",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.RoleList",
      "method": "GET",
      "summary": "list objects of kind Role",
      "nickname": "listRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.RoleList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Role",
      "method": "POST",
      "summary": "create a Role",
      "nickname": "createRole",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Role",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Role"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/routes",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Route",
      "method": "GET",
      "summary": "list or watch objects of kind Route",
      "nickname": "listNamespacedRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Route"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Route",
      "method": "POST",
      "summary": "create a Route",
      "nickname": "createNamespacedRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Route",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Route"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/routes",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Route",
      "nickname": "watchNamespacedRouteList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/routes/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Route",
      "method": "GET",
      "summary": "read the specified Route",
      "nickname": "readNamespacedRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Route",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Route"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Route",
      "method": "PUT",
      "summary": "replace the specified Route",
      "nickname": "replaceNamespacedRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Route",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Route",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Route"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Route",
      "method": "PATCH",
      "summary": "partially update the specified Route",
      "nickname": "patchNamespacedRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Route",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Route"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Route",
      "nickname": "deleteNamespacedRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Route",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/routes/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind Route",
      "nickname": "watchNamespacedRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Route",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/routes",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Route",
      "method": "GET",
      "summary": "list or watch objects of kind Route",
      "nickname": "listRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Route"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Route",
      "method": "POST",
      "summary": "create a Route",
      "nickname": "createRoute",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Route",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Route"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/routes",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Route",
      "nickname": "watchRouteList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/subjectaccessreviews",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.SubjectAccessReview",
      "method": "POST",
      "summary": "create a SubjectAccessReview",
      "nickname": "createNamespacedSubjectAccessReview",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.SubjectAccessReview",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.SubjectAccessReview"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/subjectaccessreviews",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.SubjectAccessReview",
      "method": "POST",
      "summary": "create a SubjectAccessReview",
      "nickname": "createSubjectAccessReview",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.SubjectAccessReview",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.SubjectAccessReview"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/templates",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.TemplateList",
      "method": "GET",
      "summary": "list or watch objects of kind Template",
      "nickname": "listNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.TemplateList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Template",
      "method": "POST",
      "summary": "create a Template",
      "nickname": "createNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Template",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Template"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/templates",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Template",
      "nickname": "watchNamespacedTemplateList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/namespaces/{namespace}/templates/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.Template",
      "method": "GET",
      "summary": "read the specified Template",
      "nickname": "readNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Template",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Template"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Template",
      "method": "PUT",
      "summary": "replace the specified Template",
      "nickname": "replaceNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Template",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Template",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Template"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Template",
      "method": "PATCH",
      "summary": "partially update the specified Template",
      "nickname": "patchNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Template",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Template"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a Template",
      "nickname": "deleteNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Template",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/namespaces/{namespace}/templates/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind Template",
      "nickname": "watchNamespacedTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Template",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/templates",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.TemplateList",
      "method": "GET",
      "summary": "list or watch objects of kind Template",
      "nickname": "listTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.TemplateList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.Template",
      "method": "POST",
      "summary": "create a Template",
      "nickname": "createTemplate",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.Template",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Template"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/templates",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of Template",
      "nickname": "watchTemplateList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/useridentitymappings",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.UserIdentityMapping",
      "method": "POST",
      "summary": "create a UserIdentityMapping",
      "nickname": "createNamespacedUserIdentityMapping",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.UserIdentityMapping",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.UserIdentityMapping"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/useridentitymappings/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.UserIdentityMapping",
      "method": "GET",
      "summary": "read the specified UserIdentityMapping",
      "nickname": "readNamespacedUserIdentityMapping",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the UserIdentityMapping",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.UserIdentityMapping"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.UserIdentityMapping",
      "method": "PUT",
      "summary": "replace the specified UserIdentityMapping",
      "nickname": "replaceNamespacedUserIdentityMapping",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.UserIdentityMapping",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the UserIdentityMapping",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.UserIdentityMapping"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.UserIdentityMapping",
      "method": "PATCH",
      "summary": "partially update the specified UserIdentityMapping",
      "nickname": "patchNamespacedUserIdentityMapping",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the UserIdentityMapping",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.UserIdentityMapping"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a UserIdentityMapping",
      "nickname": "deleteNamespacedUserIdentityMapping",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the UserIdentityMapping",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/users",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.UserList",
      "method": "GET",
      "summary": "list or watch objects of kind User",
      "nickname": "listNamespacedUser",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.UserList"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.User",
      "method": "POST",
      "summary": "create a User",
      "nickname": "createNamespacedUser",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.User",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.User"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/users",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch individual changes to a list of User",
      "nickname": "watchNamespacedUserList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/users/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "v1.User",
      "method": "GET",
      "summary": "read the specified User",
      "nickname": "readNamespacedUser",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the User",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.User"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.User",
      "method": "PUT",
      "summary": "replace the specified User",
      "nickname": "replaceNamespacedUser",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.User",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the User",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.User"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1.User",
      "method": "PATCH",
      "summary": "partially update the specified User",
      "nickname": "patchNamespacedUser",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "api.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the User",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.User"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "v1.Status",
      "method": "DELETE",
      "summary": "delete a User",
      "nickname": "deleteNamespacedUser",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the User",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1.Status"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/oapi/v1/watch/users/{name}",
    "description": "OpenShift REST API, version v1",
    "operations": [
     {
      "type": "json.WatchEvent",
      "method": "GET",
      "summary": "watch changes to an object of kind User",
      "nickname": "watchNamespacedUser",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "a selector to restrict the list of returned objects by their labels; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "a selector to restrict the list of returned objects by their fields; defaults to everything",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the User",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "json.WatchEvent"
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   }
  ],
  "models": {
   "v1.BuildConfigList": {
    "id": "v1.BuildConfigList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.BuildConfig"
      },
      "description": "list of build configs"
     }
    }
   },
   "v1.ListMeta": {
    "id": "v1.ListMeta",
    "properties": {
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
     }
    }
   },
   "v1.BuildConfig": {
    "id": "v1.BuildConfig",
    "required": [
     "spec",
     "status"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "spec": {
      "$ref": "v1.BuildConfigSpec",
      "description": "holds all the input necessary to produce a new build, and the conditions when to trigger them"
     },
     "status": {
      "$ref": "v1.BuildConfigStatus",
      "description": "holds any relevant information about a build config derived by the system"
     }
    }
   },
   "v1.ObjectMeta": {
    "id": "v1.ObjectMeta",
    "properties": {
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "uid": {
      "type": "string",
      "description": "unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
     },
     "generation": {
      "type": "integer",
      "format": "int64",
      "description": "a sequence number representing a specific generation of the desired state; populated by the system; read-only"
     },
     "creationTimestamp": {
      "type": "string",
      "format": "date-time",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
     },
     "deletionTimestamp": {
      "type": "string",
      "format": "date-time",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
     },
     "labels": {
      "type": "any",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md"
     },
     "annotations": {
      "type": "any",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md"
     }
    }
   },
   "v1.BuildConfigSpec": {
    "id": "v1.BuildConfigSpec",
    "required": [
     "triggers",
     "strategy"
    ],
    "properties": {
     "triggers": {
      "type": "array",
      "items": {
       "$ref": "v1.BuildTriggerPolicy"
      },
      "description": "determines how new builds can be launched from a build config.  if no triggers are defined, a new build can only occur as a result of an explicit client build creation."
     },
     "serviceAccount": {
      "type": "string",
      "description": "the name of the service account to use to run pods created by the build, pod will be allowed to use secrets referenced by the service account"
     },
     "source": {
      "$ref": "v1.BuildSource",
      "description": "describes the source control management system in use"
     },
     "revision": {
      "$ref": "v1.SourceRevision",
      "description": "specific revision in the source repository"
     },
     "strategy": {
      "$ref": "v1.BuildStrategy",
      "description": "defines how to perform a build"
     },
     "output": {
      "$ref": "v1.BuildOutput",
      "description": "describes the output of a build that a strategy should produce"
     },
     "resources": {
      "$ref": "v1.ResourceRequirements",
      "description": "the desired compute resources the build should have"
     }
    }
   },
   "v1.BuildTriggerPolicy": {
    "id": "v1.BuildTriggerPolicy",
    "required": [
     "type"
    ],
    "properties": {
     "type": {
      "type": "string",
      "description": "type of build trigger"
     },
     "github": {
      "$ref": "v1.WebHookTrigger",
      "description": "parameters for a GitHub webhook type of trigger"
     },
     "generic": {
      "$ref": "v1.WebHookTrigger",
      "description": "parameters for a Generic webhook type of trigger"
     },
     "imageChange": {
      "$ref": "v1.ImageChangeTrigger",
      "description": "parameters for an ImageChange type of trigger"
     }
    }
   },
   "v1.WebHookTrigger": {
    "id": "v1.WebHookTrigger",
    "properties": {
     "secret": {
      "type": "string",
      "description": "secret used to validate requests"
     }
    }
   },
   "v1.ImageChangeTrigger": {
    "id": "v1.ImageChangeTrigger",
    "properties": {
     "lastTriggeredImageID": {
      "type": "string",
      "description": "used internally to save last used image ID for build"
     },
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "reference to an ImageStreamTag that will trigger the build"
     }
    }
   },
   "v1.ObjectReference": {
    "id": "v1.ObjectReference",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md"
     },
     "name": {
      "type": "string",
      "description": "name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
     },
     "uid": {
      "type": "string",
      "description": "uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids"
     },
     "apiVersion": {
      "type": "string",
      "description": "API version of the referent"
     },
     "resourceVersion": {
      "type": "string",
      "description": "specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
     },
     "fieldPath": {
      "type": "string",
      "description": "if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]"
     }
    }
   },
   "v1.BuildSource": {
    "id": "v1.BuildSource",
    "required": [
     "type"
    ],
    "properties": {
     "type": {
      "type": "string",
      "description": "type of source control management system"
     },
     "git": {
      "$ref": "v1.GitBuildSource",
      "description": "optional information about git build source"
     },
     "contextDir": {
      "type": "string",
      "description": "specifies sub-directory where the source code for the application exists, allows for sources to be built from a directory other than the root of a repository"
     },
     "sourceSecret": {
      "$ref": "v1.LocalObjectReference",
      "description": "supported auth methods are: ssh-privatekey"
     }
    }
   },
   "v1.GitBuildSource": {
    "id": "v1.GitBuildSource",
    "required": [
     "uri"
    ],
    "properties": {
     "uri": {
      "type": "string",
      "description": "points to the source that will be built, structure of the source will depend on the type of build to run"
     },
     "ref": {
      "type": "string",
      "description": "identifies the branch/tag/ref to build"
     },
     "httpProxy": {
      "type": "string",
      "description": "specifies a http proxy to be used during git clone operations"
     },
     "httpsProxy": {
      "type": "string",
      "description": "specifies a https proxy to be used during git clone operations"
     }
    }
   },
   "v1.LocalObjectReference": {
    "id": "v1.LocalObjectReference",
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
     }
    }
   },
   "v1.SourceRevision": {
    "id": "v1.SourceRevision",
    "required": [
     "type"
    ],
    "properties": {
     "type": {
      "type": "string",
      "description": "type of the build source"
     },
     "git": {
      "$ref": "v1.GitSourceRevision",
      "description": "information about git-based build source"
     }
    }
   },
   "v1.GitSourceRevision": {
    "id": "v1.GitSourceRevision",
    "properties": {
     "commit": {
      "type": "string",
      "description": "hash identifying a specific commit"
     },
     "author": {
      "$ref": "v1.SourceControlUser",
      "description": "author of a specific commit"
     },
     "committer": {
      "$ref": "v1.SourceControlUser",
      "description": "committer of a specific commit"
     },
     "message": {
      "type": "string",
      "description": "description of a specific commit"
     }
    }
   },
   "v1.SourceControlUser": {
    "id": "v1.SourceControlUser",
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the source control user"
     },
     "email": {
      "type": "string",
      "description": "e-mail of the source control user"
     }
    }
   },
   "v1.BuildStrategy": {
    "id": "v1.BuildStrategy",
    "required": [
     "type"
    ],
    "properties": {
     "type": {
      "type": "string",
      "description": "identifies the type of build strategy"
     },
     "dockerStrategy": {
      "$ref": "v1.DockerBuildStrategy",
      "description": "holds parameters for the Docker build strategy"
     },
     "sourceStrategy": {
      "$ref": "v1.SourceBuildStrategy",
      "description": "holds parameters to the Source build strategy"
     },
     "customStrategy": {
      "$ref": "v1.CustomBuildStrategy",
      "description": "holds parameters to the Custom build strategy"
     }
    }
   },
   "v1.DockerBuildStrategy": {
    "id": "v1.DockerBuildStrategy",
    "properties": {
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "reference to image stream, image stream tag, or image stream image from which docker image should be pulled, resulting image will be used in the FROM line for the Dockerfile for this build"
     },
     "pullSecret": {
      "$ref": "v1.LocalObjectReference",
      "description": "supported type: dockercfg"
     },
     "noCache": {
      "type": "boolean",
      "description": "if true, indicates that the Docker build must be executed with the --no-cache=true flag"
     },
     "env": {
      "type": "array",
      "items": {
       "$ref": "v1.EnvVar"
      },
      "description": "additional environment variables you want to pass into a builder container"
     },
     "forcePull": {
      "type": "boolean",
      "description": "forces the source build to pull the image if true"
     }
    }
   },
   "v1.EnvVar": {
    "id": "v1.EnvVar",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the environment variable; must be a C_IDENTIFIER"
     },
     "value": {
      "type": "string",
      "description": "value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not"
     },
     "valueFrom": {
      "$ref": "v1.EnvVarSource",
      "description": "source for the environment variable's value; cannot be used if value is not empty"
     }
    }
   },
   "v1.EnvVarSource": {
    "id": "v1.EnvVarSource",
    "required": [
     "fieldRef"
    ],
    "properties": {
     "fieldRef": {
      "$ref": "v1.ObjectFieldSelector",
      "description": "selects a field of the pod; only name and namespace are supported"
     }
    }
   },
   "v1.ObjectFieldSelector": {
    "id": "v1.ObjectFieldSelector",
    "required": [
     "fieldPath"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema that fieldPath is written in terms of; defaults to v1"
     },
     "fieldPath": {
      "type": "string",
      "description": "path of the field to select in the specified API version"
     }
    }
   },
   "v1.SourceBuildStrategy": {
    "id": "v1.SourceBuildStrategy",
    "required": [
     "from"
    ],
    "properties": {
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled"
     },
     "pullSecret": {
      "$ref": "v1.LocalObjectReference",
      "description": "supported type: dockercfg"
     },
     "env": {
      "type": "array",
      "items": {
       "$ref": "v1.EnvVar"
      },
      "description": "additional environment variables you want to pass into a builder container"
     },
     "scripts": {
      "type": "string",
      "description": "location of the source scripts"
     },
     "incremental": {
      "type": "boolean",
      "description": "forces the source build to do incremental builds if true"
     },
     "forcePull": {
      "type": "boolean",
      "description": "forces the source build to pull the image if true"
     }
    }
   },
   "v1.CustomBuildStrategy": {
    "id": "v1.CustomBuildStrategy",
    "required": [
     "from"
    ],
    "properties": {
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled"
     },
     "pullSecret": {
      "$ref": "v1.LocalObjectReference",
      "description": "supported type: dockercfg"
     },
     "env": {
      "type": "array",
      "items": {
       "$ref": "v1.EnvVar"
      },
      "description": "additional environment variables you want to pass into a builder container"
     },
     "exposeDockerSocket": {
      "type": "boolean",
      "description": "allow running Docker commands (and build Docker images) from inside the container"
     },
     "forcePull": {
      "type": "boolean",
      "description": "forces pulling of builder image from remote registry if true"
     }
    }
   },
   "v1.BuildOutput": {
    "id": "v1.BuildOutput",
    "properties": {
     "to": {
      "$ref": "v1.ObjectReference",
      "description": "The optional image stream to push the output of this build.  The namespace may be empty, in which case, the image stream will be looked up based on the namespace of the build."
     },
     "pushSecret": {
      "$ref": "v1.LocalObjectReference",
      "description": "supported type: dockercfg"
     }
    }
   },
   "v1.ResourceRequirements": {
    "id": "v1.ResourceRequirements",
    "properties": {
     "limits": {
      "type": "any",
      "description": "Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications"
     },
     "requests": {
      "type": "any",
      "description": "Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications"
     }
    }
   },
   "v1.BuildConfigStatus": {
    "id": "v1.BuildConfigStatus",
    "required": [
     "lastVersion"
    ],
    "properties": {
     "lastVersion": {
      "type": "integer",
      "format": "int32",
      "description": "used to inform about number of last triggered build"
     }
    }
   },
   "json.WatchEvent": {
    "id": "json.WatchEvent",
    "properties": {
     "type": {
      "type": "string",
      "description": "the type of watch event; may be ADDED, MODIFIED, DELETED, or ERROR"
     },
     "object": {
      "type": "string",
      "description": "the object being watched; will match the type of the resource endpoint or be a Status object if the type is ERROR"
     }
    }
   },
   "api.Patch": {
    "id": "api.Patch",
    "properties": {}
   },
   "v1.Status": {
    "id": "v1.Status",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta",
      "description": "standard list metadata; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
     },
     "status": {
      "type": "string",
      "description": "status of the operation; either Success, or Failure; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
     },
     "message": {
      "type": "string",
      "description": "human-readable description of the status of this operation"
     },
     "reason": {
      "type": "string",
      "description": "machine-readable description of why this operation is in the 'Failure' status; if this value is empty there is no information available; a reason clarifies an HTTP status code but does not override it"
     },
     "details": {
      "$ref": "v1.StatusDetails",
      "description": "extended data associated with the reason; each reason may define its own extended details; this field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type"
     },
     "code": {
      "type": "integer",
      "format": "int32",
      "description": "suggested HTTP return code for this status; 0 if not set"
     }
    }
   },
   "v1.StatusDetails": {
    "id": "v1.StatusDetails",
    "properties": {
     "name": {
      "type": "string",
      "description": "the name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)"
     },
     "kind": {
      "type": "string",
      "description": "the kind attribute of the resource associated with the status StatusReason; on some operations may differ from the requested resource Kind; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "causes": {
      "type": "array",
      "items": {
       "$ref": "v1.StatusCause"
      },
      "description": "the Causes array includes more details associated with the StatusReason failure; not all StatusReasons may provide detailed causes"
     },
     "retryAfterSeconds": {
      "type": "integer",
      "format": "int32",
      "description": "the number of seconds before the client should attempt to retry this operation"
     }
    }
   },
   "v1.StatusCause": {
    "id": "v1.StatusCause",
    "properties": {
     "reason": {
      "type": "string",
      "description": "machine-readable description of the cause of the error; if this value is empty there is no information available"
     },
     "message": {
      "type": "string",
      "description": "human-readable description of the cause of the error; this field may be presented as-is to a reader"
     },
     "field": {
      "type": "string",
      "description": "field of the resource that has caused this error, as named by its JSON serialization; may include dot and postfix notation for nested attributes; arrays are zero-indexed; fields may appear more than once in an array of causes due to fields having multiple errors"
     }
    }
   },
   "v1.DeleteOptions": {
    "id": "v1.DeleteOptions",
    "required": [
     "gracePeriodSeconds"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "gracePeriodSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "the duration in seconds to wait before deleting this object; defaults to a per object value if not specified; zero means delete immediately"
     }
    }
   },
   "v1.BuildRequest": {
    "id": "v1.BuildRequest",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "revision": {
      "$ref": "v1.SourceRevision",
      "description": "information from the source for a specific repo snapshot"
     },
     "triggeredByImage": {
      "$ref": "v1.ObjectReference",
      "description": "image that triggered this build"
     },
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "ImageStreamTag that triggered this build"
     },
     "lastVersion": {
      "type": "integer",
      "format": "int32",
      "description": "LastVersion of the BuildConfig that triggered this build"
     }
    }
   },
   "v1.BuildList": {
    "id": "v1.BuildList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Build"
      },
      "description": "list of builds"
     }
    }
   },
   "v1.Build": {
    "id": "v1.Build",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "spec": {
      "$ref": "v1.BuildSpec",
      "description": "specification of the desired behavior for a build"
     },
     "status": {
      "$ref": "v1.BuildStatus",
      "description": "most recently observed status of a build as populated by the system"
     }
    }
   },
   "v1.BuildSpec": {
    "id": "v1.BuildSpec",
    "required": [
     "strategy"
    ],
    "properties": {
     "serviceAccount": {
      "type": "string",
      "description": "the name of the service account to use to run pods created by the build, pod will be allowed to use secrets referenced by the service account"
     },
     "source": {
      "$ref": "v1.BuildSource",
      "description": "describes the source control management system in use"
     },
     "revision": {
      "$ref": "v1.SourceRevision",
      "description": "specific revision in the source repository"
     },
     "strategy": {
      "$ref": "v1.BuildStrategy",
      "description": "defines how to perform a build"
     },
     "output": {
      "$ref": "v1.BuildOutput",
      "description": "describes the output of a build that a strategy should produce"
     },
     "resources": {
      "$ref": "v1.ResourceRequirements",
      "description": "the desired compute resources the build should have"
     }
    }
   },
   "v1.BuildStatus": {
    "id": "v1.BuildStatus",
    "required": [
     "phase"
    ],
    "properties": {
     "phase": {
      "type": "string",
      "description": "observed point in the build lifecycle"
     },
     "cancelled": {
      "type": "boolean",
      "description": "describes if a canceling event was triggered for the build"
     },
     "message": {
      "type": "string",
      "description": "human-readable message indicating details about why the build has this status"
     },
     "startTimestamp": {
      "type": "string",
      "format": "date-time",
      "description": "server time when this build started running in a pod"
     },
     "completionTimestamp": {
      "type": "string",
      "format": "date-time",
      "description": "server time when the pod running this build stopped running"
     },
     "duration": {
      "$ref": "time.Duration",
      "description": "amount of time the build has been running"
     },
     "config": {
      "$ref": "v1.ObjectReference",
      "description": "reference to build config from which this build was derived"
     }
    }
   },
   "v1.BuildLog": {
    "id": "v1.BuildLog",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     }
    }
   },
   "v1.ClusterNetworkList": {
    "id": "v1.ClusterNetworkList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.ClusterNetwork"
      },
      "description": "list of cluster networks"
     }
    }
   },
   "v1.ClusterNetwork": {
    "id": "v1.ClusterNetwork",
    "required": [
     "network",
     "hostsubnetlength"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "network": {
      "type": "string",
      "description": "CIDR string to specify the global overlay network's L3 space"
     },
     "hostsubnetlength": {
      "type": "integer",
      "format": "int32",
      "description": "number of bits to allocate to each host's subnet e.g. 8 would mean a /24 network on the host"
     }
    }
   },
   "v1.ClusterPolicyList": {
    "id": "v1.ClusterPolicyList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.ClusterPolicy"
      },
      "description": "list of cluster policies"
     }
    }
   },
   "v1.ClusterPolicy": {
    "id": "v1.ClusterPolicy",
    "required": [
     "lastModified",
     "roles"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "lastModified": {
      "type": "string",
      "format": "date-time",
      "description": "last time any part of the object was created, updated, or deleted"
     },
     "roles": {
      "type": "array",
      "items": {
       "$ref": "v1.NamedClusterRole"
      },
      "description": "all the roles held by this policy, mapped by role name"
     }
    }
   },
   "v1.NamedClusterRole": {
    "id": "v1.NamedClusterRole",
    "required": [
     "name",
     "role"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the cluster role"
     },
     "role": {
      "$ref": "v1.ClusterRole",
      "description": "the cluster role"
     }
    }
   },
   "v1.ClusterRole": {
    "id": "v1.ClusterRole",
    "required": [
     "rules"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "rules": {
      "type": "array",
      "items": {
       "$ref": "v1.PolicyRule"
      },
      "description": "list of policy rules"
     }
    }
   },
   "v1.PolicyRule": {
    "id": "v1.PolicyRule",
    "required": [
     "verbs",
     "resources"
    ],
    "properties": {
     "verbs": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds."
     },
     "attributeRestrictions": {
      "type": "string",
      "description": "vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error."
     },
     "resources": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of resources this rule applies to.  * represents all resources."
     },
     "resourceNames": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "optional white list of names that the rule applies to.  An empty set means that everything is allowed."
     },
     "nonResourceURLs": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path."
     }
    }
   },
   "v1.ClusterPolicyBindingList": {
    "id": "v1.ClusterPolicyBindingList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.ClusterPolicyBinding"
      },
      "description": "list of cluster policy bindings"
     }
    }
   },
   "v1.ClusterPolicyBinding": {
    "id": "v1.ClusterPolicyBinding",
    "required": [
     "lastModified",
     "policyRef",
     "roleBindings"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "lastModified": {
      "type": "string",
      "format": "date-time",
      "description": "last time any part of the object was created, updated, or deleted"
     },
     "policyRef": {
      "$ref": "v1.ObjectReference",
      "description": "reference to the cluster policy that this cluster policy binding's role bindings may reference"
     },
     "roleBindings": {
      "type": "array",
      "items": {
       "$ref": "v1.NamedClusterRoleBinding"
      },
      "description": "all the role bindings held by this policy, mapped by role name"
     }
    }
   },
   "v1.NamedClusterRoleBinding": {
    "id": "v1.NamedClusterRoleBinding",
    "required": [
     "name",
     "roleBinding"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the cluster role binding"
     },
     "roleBinding": {
      "$ref": "v1.ClusterRoleBinding",
      "description": "the cluster role binding"
     }
    }
   },
   "v1.ClusterRoleBinding": {
    "id": "v1.ClusterRoleBinding",
    "required": [
     "userNames",
     "groupNames",
     "roleRef"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "userNames": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "all user names directly bound to the role"
     },
     "groupNames": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "all the groups directly bound to the role"
     },
     "roleRef": {
      "$ref": "v1.ObjectReference",
      "description": "reference to the policy role"
     }
    }
   },
   "v1.ClusterRoleBindingList": {
    "id": "v1.ClusterRoleBindingList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.ClusterRoleBinding"
      },
      "description": "list of cluster role bindings"
     }
    }
   },
   "v1.ClusterRoleList": {
    "id": "v1.ClusterRoleList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.ClusterRole"
      },
      "description": "list of cluster roles"
     }
    }
   },
   "v1.DeploymentConfigRollback": {
    "id": "v1.DeploymentConfigRollback",
    "required": [
     "spec"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "spec": {
      "$ref": "v1.DeploymentConfigRollbackSpec",
      "description": "options for rollback generation"
     }
    }
   },
   "v1.DeploymentConfigRollbackSpec": {
    "id": "v1.DeploymentConfigRollbackSpec",
    "required": [
     "from",
     "includeTriggers",
     "includeTemplate",
     "includeReplicationMeta",
     "includeStrategy"
    ],
    "properties": {
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "a reference to a deployment, which is a ReplicationController"
     },
     "includeTriggers": {
      "type": "boolean",
      "description": "whether to include old config triggers in the rollback"
     },
     "includeTemplate": {
      "type": "boolean",
      "description": "whether to include the old pod template spec in the rollback"
     },
     "includeReplicationMeta": {
      "type": "boolean",
      "description": "whether to include the replica count and replica selector in the rollback"
     },
     "includeStrategy": {
      "type": "boolean",
      "description": "whether to include the deployment strategy in the rollback"
     }
    }
   },
   "v1.DeploymentConfigList": {
    "id": "v1.DeploymentConfigList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.DeploymentConfig"
      },
      "description": "a list of deployment configs"
     }
    }
   },
   "v1.DeploymentConfig": {
    "id": "v1.DeploymentConfig",
    "required": [
     "spec",
     "status"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "spec": {
      "$ref": "v1.DeploymentConfigSpec",
      "description": "a desired deployment state and how to deploy it"
     },
     "status": {
      "$ref": "v1.DeploymentConfigStatus",
      "description": "the current state of the latest deployment"
     }
    }
   },
   "v1.DeploymentConfigSpec": {
    "id": "v1.DeploymentConfigSpec",
    "required": [
     "replicas",
     "selector"
    ],
    "properties": {
     "strategy": {
      "$ref": "v1.DeploymentStrategy",
      "description": "how a deployment is executed"
     },
     "triggers": {
      "type": "array",
      "items": {
       "$ref": "v1.DeploymentTriggerPolicy"
      },
      "description": "how new deployments are triggered"
     },
     "replicas": {
      "type": "integer",
      "format": "int32",
      "description": "the desired number of replicas"
     },
     "selector": {
      "type": "any",
      "description": "a label query over pods that should match the replicas count"
     },
     "template": {
      "$ref": "v1.PodTemplateSpec",
      "description": "describes the pod that will be created if insufficient replicas are detected; takes precedence over a template reference"
     }
    }
   },
   "v1.DeploymentStrategy": {
    "id": "v1.DeploymentStrategy",
    "properties": {
     "type": {
      "type": "string",
      "description": "the name of a deployment strategy"
     },
     "customParams": {
      "$ref": "v1.CustomDeploymentStrategyParams",
      "description": "input to the Custom deployment strategy"
     },
     "recreateParams": {
      "$ref": "v1.RecreateDeploymentStrategyParams",
      "description": "input to the Recreate deployment strategy"
     },
     "rollingParams": {
      "$ref": "v1.RollingDeploymentStrategyParams",
      "description": "input to the Rolling deployment strategy"
     },
     "resources": {
      "$ref": "v1.ResourceRequirements",
      "description": "resource requirements to execute the deployment"
     }
    }
   },
   "v1.CustomDeploymentStrategyParams": {
    "id": "v1.CustomDeploymentStrategyParams",
    "properties": {
     "image": {
      "type": "string",
      "description": "a Docker image which can carry out a deployment"
     },
     "environment": {
      "type": "array",
      "items": {
       "$ref": "v1.EnvVar"
      },
      "description": "environment variables provided to the deployment process container"
     },
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "optionally overrides the container command (default is specified by the image)"
     }
    }
   },
   "v1.RecreateDeploymentStrategyParams": {
    "id": "v1.RecreateDeploymentStrategyParams",
    "properties": {
     "pre": {
      "$ref": "v1.LifecycleHook",
      "description": "a hook executed before the strategy starts the deployment"
     },
     "post": {
      "$ref": "v1.LifecycleHook",
      "description": "a hook executed after the strategy finishes the deployment"
     }
    }
   },
   "v1.LifecycleHook": {
    "id": "v1.LifecycleHook",
    "required": [
     "failurePolicy"
    ],
    "properties": {
     "failurePolicy": {
      "type": "string",
      "description": "what action to take if the hook fails"
     },
     "execNewPod": {
      "$ref": "v1.ExecNewPodHook",
      "description": "options for an ExecNewPodHook"
     }
    }
   },
   "v1.ExecNewPodHook": {
    "id": "v1.ExecNewPodHook",
    "required": [
     "command",
     "containerName"
    ],
    "properties": {
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "the hook command and its arguments"
     },
     "env": {
      "type": "array",
      "items": {
       "$ref": "v1.EnvVar"
      },
      "description": "environment variables provided to the hook container"
     },
     "containerName": {
      "type": "string",
      "description": "the name of a container from the pod template whose image will be used for the hook container"
     }
    }
   },
   "v1.RollingDeploymentStrategyParams": {
    "id": "v1.RollingDeploymentStrategyParams",
    "properties": {
     "updatePeriodSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "the time to wait between individual pod updates"
     },
     "intervalSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "the time to wait between polling deployment status after update"
     },
     "timeoutSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "the time to wait for updates before giving up"
     },
     "updatePercent": {
      "type": "integer",
      "format": "int32",
      "description": "the percentage of replicas to scale up or down each interval (negative value switches scale order to down/up instead of up/down)"
     },
     "pre": {
      "$ref": "v1.LifecycleHook",
      "description": "a hook executed before the strategy starts the deployment"
     },
     "post": {
      "$ref": "v1.LifecycleHook",
      "description": "a hook executed after the strategy finishes the deployment"
     }
    }
   },
   "v1.DeploymentTriggerPolicy": {
    "id": "v1.DeploymentTriggerPolicy",
    "properties": {
     "type": {
      "type": "string",
      "description": "the type of the trigger"
     },
     "imageChangeParams": {
      "$ref": "v1.DeploymentTriggerImageChangeParams",
      "description": "input to the ImageChange trigger"
     }
    }
   },
   "v1.DeploymentTriggerImageChangeParams": {
    "id": "v1.DeploymentTriggerImageChangeParams",
    "required": [
     "from"
    ],
    "properties": {
     "automatic": {
      "type": "boolean",
      "description": "whether detection of a new tag value should trigger a deployment"
     },
     "containerNames": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "restricts tag updates to a set of container names in the pod"
     },
     "from": {
      "$ref": "v1.ObjectReference"
     },
     "lastTriggeredImage": {
      "type": "string",
      "description": "the last image to be triggered"
     }
    }
   },
   "v1.PodTemplateSpec": {
    "id": "v1.PodTemplateSpec",
    "properties": {
     "metadata": {
      "$ref": "v1.ObjectMeta",
      "description": "standard object metadata; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
     },
     "spec": {
      "$ref": "v1.PodSpec",
      "description": "specification of the desired behavior of the pod; http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
     }
    }
   },
   "v1.PodSpec": {
    "id": "v1.PodSpec",
    "required": [
     "containers"
    ],
    "properties": {
     "volumes": {
      "type": "array",
      "items": {
       "$ref": "v1.Volume"
      },
      "description": "list of volumes that can be mounted by containers belonging to the pod; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md"
     },
     "containers": {
      "type": "array",
      "items": {
       "$ref": "v1.Container"
      },
      "description": "list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md"
     },
     "restartPolicy": {
      "type": "string",
      "description": "restart policy for all containers within the pod; one of Always, OnFailure, Never; defaults to Always; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#restartpolicy"
     },
     "terminationGracePeriodSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process"
     },
     "activeDeadlineSeconds": {
      "type": "integer",
      "format": "int64"
     },
     "dnsPolicy": {
      "type": "string",
      "description": "DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default'"
     },
     "nodeSelector": {
      "type": "any",
      "description": "selector which must match a node's labels for the pod to be scheduled on that node; see http://releases.k8s.io/HEAD/docs/user-guide/node-selection/README.md"
     },
     "host": {
      "type": "string",
      "description": "deprecated, use nodeName instead"
     },
     "serviceAccountName": {
      "type": "string",
      "description": "name of the ServiceAccount to use to run this pod; see http://releases.k8s.io/HEAD/docs/design/service_accounts.md"
     },
     "serviceAccount": {
      "type": "string",
      "description": "deprecated; use serviceAccountName instead"
     },
     "nodeName": {
      "type": "string",
      "description": "node requested for this pod"
     },
     "hostNetwork": {
      "type": "boolean",
      "description": "host networking requested for this pod"
     },
     "imagePullSecrets": {
      "type": "array",
      "items": {
       "$ref": "v1.LocalObjectReference"
      },
      "description": "list of references to secrets in the same namespace available for pulling the container images; see http://releases.k8s.io/HEAD/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod"
     }
    }
   },
   "v1.Volume": {
    "id": "v1.Volume",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "volume name; must be a DNS_LABEL and unique within the pod; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
     },
     "hostPath": {
      "$ref": "v1.HostPathVolumeSource",
      "description": "pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath"
     },
     "emptyDir": {
      "$ref": "v1.EmptyDirVolumeSource",
      "description": "temporary directory that shares a pod's lifetime; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir"
     },
     "gcePersistentDisk": {
      "$ref": "v1.GCEPersistentDiskVolumeSource",
      "description": "GCE disk resource attached to the host machine on demand; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
     },
     "awsElasticBlockStore": {
      "$ref": "v1.AWSElasticBlockStoreVolumeSource",
      "description": "AWS disk resource attached to the host machine on demand; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
     },
     "gitRepo": {
      "$ref": "v1.GitRepoVolumeSource",
      "description": "git repository at a particular revision"
     },
     "secret": {
      "$ref": "v1.SecretVolumeSource",
      "description": "secret to populate volume; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets"
     },
     "nfs": {
      "$ref": "v1.NFSVolumeSource",
      "description": "NFS volume that will be mounted in the host machine; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
     },
     "iscsi": {
      "$ref": "v1.ISCSIVolumeSource",
      "description": "iSCSI disk attached to host machine on demand; see http://releases.k8s.io/HEAD/examples/iscsi/README.md"
     },
     "glusterfs": {
      "$ref": "v1.GlusterfsVolumeSource",
      "description": "Glusterfs volume that will be mounted on the host machine; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md"
     },
     "persistentVolumeClaim": {
      "$ref": "v1.PersistentVolumeClaimVolumeSource",
      "description": "a reference to a PersistentVolumeClaim in the same namespace; see http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims"
     },
     "rbd": {
      "$ref": "v1.RBDVolumeSource",
      "description": "rados block volume that will be mounted on the host machine; see http://releases.k8s.io/HEAD/examples/rbd/README.md"
     },
     "cephfs": {
      "$ref": "v1.CephFSVolumeSource",
      "description": "Ceph filesystem that will be mounted on the host machine"
     },
     "metadata": {
      "$ref": "v1.MetadataVolumeSource",
      "description": "Metadata volume containing information about the pod"
     }
    }
   },
   "v1.HostPathVolumeSource": {
    "id": "v1.HostPathVolumeSource",
    "required": [
     "path"
    ],
    "properties": {
     "path": {
      "type": "string",
      "description": "path of the directory on the host; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath"
     }
    }
   },
   "v1.EmptyDirVolumeSource": {
    "id": "v1.EmptyDirVolumeSource",
    "properties": {
     "medium": {
      "type": "string",
      "description": "type of storage used to back the volume; must be an empty string (default) or Memory; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir"
     }
    }
   },
   "v1.GCEPersistentDiskVolumeSource": {
    "id": "v1.GCEPersistentDiskVolumeSource",
    "required": [
     "pdName",
     "fsType"
    ],
    "properties": {
     "pdName": {
      "type": "string",
      "description": "unique name of the PD resource in GCE; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
     },
     "fsType": {
      "type": "string",
      "description": "file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
     },
     "partition": {
      "type": "integer",
      "format": "int32",
      "description": "partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
     },
     "readOnly": {
      "type": "boolean",
      "description": "read-only if true, read-write otherwise (false or unspecified); see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
     }
    }
   },
   "v1.AWSElasticBlockStoreVolumeSource": {
    "id": "v1.AWSElasticBlockStoreVolumeSource",
    "required": [
     "volumeID",
     "fsType"
    ],
    "properties": {
     "volumeID": {
      "type": "string",
      "description": "unique id of the PD resource in AWS; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
     },
     "fsType": {
      "type": "string",
      "description": "file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
     },
     "partition": {
      "type": "integer",
      "format": "int32",
      "description": "partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
     },
     "readOnly": {
      "type": "boolean",
      "description": "read-only if true, read-write otherwise (false or unspecified); see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
     }
    }
   },
   "v1.GitRepoVolumeSource": {
    "id": "v1.GitRepoVolumeSource",
    "required": [
     "repository",
     "revision"
    ],
    "properties": {
     "repository": {
      "type": "string",
      "description": "repository URL"
     },
     "revision": {
      "type": "string",
      "description": "commit hash for the specified revision"
     }
    }
   },
   "v1.SecretVolumeSource": {
    "id": "v1.SecretVolumeSource",
    "required": [
     "secretName"
    ],
    "properties": {
     "secretName": {
      "type": "string",
      "description": "secretName is the name of a secret in the pod's namespace; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets"
     }
    }
   },
   "v1.NFSVolumeSource": {
    "id": "v1.NFSVolumeSource",
    "required": [
     "server",
     "path"
    ],
    "properties": {
     "server": {
      "type": "string",
      "description": "the hostname or IP address of the NFS server; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
     },
     "path": {
      "type": "string",
      "description": "the path that is exported by the NFS server; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
     },
     "readOnly": {
      "type": "boolean",
      "description": "forces the NFS export to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
     }
    }
   },
   "v1.ISCSIVolumeSource": {
    "id": "v1.ISCSIVolumeSource",
    "required": [
     "targetPortal",
     "iqn",
     "lun",
     "fsType"
    ],
    "properties": {
     "targetPortal": {
      "type": "string",
      "description": "iSCSI target portal"
     },
     "iqn": {
      "type": "string",
      "description": "iSCSI Qualified Name"
     },
     "lun": {
      "type": "integer",
      "format": "int32",
      "description": "iscsi target lun number"
     },
     "fsType": {
      "type": "string",
      "description": "file system type to mount, such as ext4, xfs, ntfs"
     },
     "readOnly": {
      "type": "boolean",
      "description": "read-only if true, read-write otherwise (false or unspecified)"
     }
    }
   },
   "v1.GlusterfsVolumeSource": {
    "id": "v1.GlusterfsVolumeSource",
    "required": [
     "endpoints",
     "path"
    ],
    "properties": {
     "endpoints": {
      "type": "string",
      "description": "gluster hosts endpoints name; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod"
     },
     "path": {
      "type": "string",
      "description": "path to gluster volume; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod"
     },
     "readOnly": {
      "type": "boolean",
      "description": "glusterfs volume to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod"
     }
    }
   },
   "v1.PersistentVolumeClaimVolumeSource": {
    "id": "v1.PersistentVolumeClaimVolumeSource",
    "required": [
     "claimName"
    ],
    "properties": {
     "claimName": {
      "type": "string",
      "description": "the name of the claim in the same namespace to be mounted as a volume; see http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims"
     },
     "readOnly": {
      "type": "boolean",
      "description": "mount volume as read-only when true; default false"
     }
    }
   },
   "v1.RBDVolumeSource": {
    "id": "v1.RBDVolumeSource",
    "required": [
     "monitors",
     "image",
     "pool",
     "user",
     "keyring",
     "secretRef"
    ],
    "properties": {
     "monitors": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "a collection of Ceph monitors; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     },
     "image": {
      "type": "string",
      "description": "rados image name; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     },
     "fsType": {
      "type": "string",
      "description": "file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     },
     "pool": {
      "type": "string",
      "description": "rados pool name; default is rbd; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     },
     "user": {
      "type": "string",
      "description": "rados user name; default is admin; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     },
     "keyring": {
      "type": "string",
      "description": "keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     },
     "secretRef": {
      "$ref": "v1.LocalObjectReference",
      "description": "name of a secret to authenticate the RBD user; if provided overrides keyring; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     },
     "readOnly": {
      "type": "boolean",
      "description": "rbd volume to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
     }
    }
   },
   "v1.CephFSVolumeSource": {
    "id": "v1.CephFSVolumeSource",
    "required": [
     "monitors"
    ],
    "properties": {
     "monitors": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "a collection of Ceph monitors"
     },
     "user": {
      "type": "string",
      "description": "rados user name; default is admin; optional"
     },
     "secretFile": {
      "type": "string",
      "description": "path to secret for rados user; default is /etc/ceph/user.secret; optional"
     },
     "secretRef": {
      "$ref": "v1.LocalObjectReference",
      "description": "name of a secret to authenticate the user; if provided overrides keyring; optional"
     },
     "readOnly": {
      "type": "boolean",
      "description": "Ceph fs to be mounted with read-only permissions"
     }
    }
   },
   "v1.MetadataVolumeSource": {
    "id": "v1.MetadataVolumeSource",
    "properties": {
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.MetadataFile"
      },
      "description": "list of metadata files"
     }
    }
   },
   "v1.MetadataFile": {
    "id": "v1.MetadataFile",
    "required": [
     "name",
     "fieldRef"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "the name of the file to be created"
     },
     "fieldRef": {
      "$ref": "v1.ObjectFieldSelector",
      "description": "selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace"
     }
    }
   },
   "v1.Container": {
    "id": "v1.Container",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated"
     },
     "image": {
      "type": "string",
      "description": "Docker image name; see http://releases.k8s.io/HEAD/docs/user-guide/images.md"
     },
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands"
     },
     "args": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands"
     },
     "workingDir": {
      "type": "string",
      "description": "container's working directory; defaults to image's default; cannot be updated"
     },
     "ports": {
      "type": "array",
      "items": {
       "$ref": "v1.ContainerPort"
      },
      "description": "list of ports to expose from the container; cannot be updated"
     },
     "env": {
      "type": "array",
      "items": {
       "$ref": "v1.EnvVar"
      },
      "description": "list of environment variables to set in the container; cannot be updated"
     },
     "resources": {
      "$ref": "v1.ResourceRequirements",
      "description": "Compute Resources required by this container; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/compute-resources.md"
     },
     "volumeMounts": {
      "type": "array",
      "items": {
       "$ref": "v1.VolumeMount"
      },
      "description": "pod volumes to mount into the container's filesyste; cannot be updated"
     },
     "livenessProbe": {
      "$ref": "v1.Probe",
      "description": "periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
     },
     "readinessProbe": {
      "$ref": "v1.Probe",
      "description": "periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
     },
     "lifecycle": {
      "$ref": "v1.Lifecycle",
      "description": "actions that the management system should take in response to container lifecycle events; cannot be updated"
     },
     "terminationMessagePath": {
      "type": "string",
      "description": "path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated"
     },
     "imagePullPolicy": {
      "type": "string",
      "description": "image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/images.md#updating-images"
     },
     "securityContext": {
      "$ref": "v1.SecurityContext",
      "description": "security options the pod should run with; see http://releases.k8s.io/HEAD/docs/design/security_context.md"
     },
     "stdin": {
      "type": "boolean",
      "description": "Whether this container should allocate a buffer for stdin in the container runtime; default is false"
     },
     "tty": {
      "type": "boolean",
      "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true; default is false"
     }
    }
   },
   "v1.ContainerPort": {
    "id": "v1.ContainerPort",
    "required": [
     "containerPort"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name for the port that can be referred to by services; must be an IANA_SVC_NAME and unique within the pod"
     },
     "hostPort": {
      "type": "integer",
      "format": "int32",
      "description": "number of port to expose on the host; most containers do not need this"
     },
     "containerPort": {
      "type": "integer",
      "format": "int32",
      "description": "number of port to expose on the pod's IP address"
     },
     "protocol": {
      "type": "string",
      "description": "protocol for port; must be UDP or TCP; TCP if unspecified"
     },
     "hostIP": {
      "type": "string",
      "description": "host IP to bind the port to"
     }
    }
   },
   "v1.VolumeMount": {
    "id": "v1.VolumeMount",
    "required": [
     "name",
     "mountPath"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the volume to mount"
     },
     "readOnly": {
      "type": "boolean",
      "description": "mounted read-only if true, read-write otherwise (false or unspecified)"
     },
     "mountPath": {
      "type": "string",
      "description": "path within the container at which the volume should be mounted"
     }
    }
   },
   "v1.Probe": {
    "id": "v1.Probe",
    "properties": {
     "exec": {
      "$ref": "v1.ExecAction",
      "description": "exec-based handler"
     },
     "httpGet": {
      "$ref": "v1.HTTPGetAction",
      "description": "HTTP-based handler"
     },
     "tcpSocket": {
      "$ref": "v1.TCPSocketAction",
      "description": "TCP-based handler; TCP hooks not yet supported"
     },
     "initialDelaySeconds": {
      "type": "integer",
      "format": "int64",
      "description": "number of seconds after the container has started before liveness probes are initiated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
     },
     "timeoutSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "number of seconds after which liveness probes timeout; defaults to 1 second; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
     }
    }
   },
   "v1.ExecAction": {
    "id": "v1.ExecAction",
    "properties": {
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy"
     }
    }
   },
   "v1.HTTPGetAction": {
    "id": "v1.HTTPGetAction",
    "required": [
     "port"
    ],
    "properties": {
     "path": {
      "type": "string",
      "description": "path to access on the HTTP server"
     },
     "port": {
      "type": "string",
      "description": "number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME"
     },
     "host": {
      "type": "string",
      "description": "hostname to connect to; defaults to pod IP"
     },
     "scheme": {
      "type": "string",
      "description": "scheme to connect with, must be HTTP or HTTPS, defaults to HTTP"
     }
    }
   },
   "v1.TCPSocketAction": {
    "id": "v1.TCPSocketAction",
    "required": [
     "port"
    ],
    "properties": {
     "port": {
      "type": "string",
      "description": "number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME"
     }
    }
   },
   "v1.Lifecycle": {
    "id": "v1.Lifecycle",
    "properties": {
     "postStart": {
      "$ref": "v1.Handler",
      "description": "called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes; see http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details"
     },
     "preStop": {
      "$ref": "v1.Handler",
      "description": "called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes; see http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details"
     }
    }
   },
   "v1.Handler": {
    "id": "v1.Handler",
    "properties": {
     "exec": {
      "$ref": "v1.ExecAction",
      "description": "exec-based handler"
     },
     "httpGet": {
      "$ref": "v1.HTTPGetAction",
      "description": "HTTP-based handler"
     },
     "tcpSocket": {
      "$ref": "v1.TCPSocketAction",
      "description": "TCP-based handler; TCP hooks not yet supported"
     }
    }
   },
   "v1.SecurityContext": {
    "id": "v1.SecurityContext",
    "properties": {
     "capabilities": {
      "$ref": "v1.Capabilities",
      "description": "the linux capabilites that should be added or removed; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context"
     },
     "privileged": {
      "type": "boolean",
      "description": "run the container in privileged mode; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context"
     },
     "seLinuxOptions": {
      "$ref": "v1.SELinuxOptions",
      "description": "options that control the SELinux labels applied; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context"
     },
     "runAsUser": {
      "type": "integer",
      "format": "int64",
      "description": "the user id that runs the first process in the container; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context"
     },
     "runAsNonRoot": {
      "type": "boolean",
      "description": "indicates the container must be run as a non-root user either by specifying the runAsUser or in the image specification"
     }
    }
   },
   "v1.Capabilities": {
    "id": "v1.Capabilities",
    "properties": {
     "add": {
      "type": "array",
      "items": {
       "$ref": "v1.Capability"
      },
      "description": "added capabilities"
     },
     "drop": {
      "type": "array",
      "items": {
       "$ref": "v1.Capability"
      },
      "description": "droped capabilities"
     }
    }
   },
   "v1.Capability": {
    "id": "v1.Capability",
    "properties": {}
   },
   "v1.SELinuxOptions": {
    "id": "v1.SELinuxOptions",
    "properties": {
     "user": {
      "type": "string",
      "description": "the user label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md"
     },
     "role": {
      "type": "string",
      "description": "the role label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md"
     },
     "type": {
      "type": "string",
      "description": "the type label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md"
     },
     "level": {
      "type": "string",
      "description": "the level label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md"
     }
    }
   },
   "v1.DeploymentConfigStatus": {
    "id": "v1.DeploymentConfigStatus",
    "properties": {
     "latestVersion": {
      "type": "integer",
      "format": "int32",
      "description": "used to determine whether the current deployment is out of sync"
     },
     "details": {
      "$ref": "v1.DeploymentDetails",
      "description": "reasons for the last update to the config"
     }
    }
   },
   "v1.DeploymentDetails": {
    "id": "v1.DeploymentDetails",
    "properties": {
     "message": {
      "type": "string",
      "description": "a user specified change message"
     },
     "causes": {
      "type": "array",
      "items": {
       "$ref": "v1.DeploymentCause"
      },
      "description": "extended data associated with all the causes for creating a new deployment"
     }
    }
   },
   "v1.DeploymentCause": {
    "id": "v1.DeploymentCause",
    "required": [
     "type"
    ],
    "properties": {
     "type": {
      "type": "string",
      "description": "the type of trigger that resulted in a new deployment"
     },
     "imageTrigger": {
      "$ref": "v1.DeploymentCauseImageTrigger",
      "description": "image trigger details (if applicable)"
     }
    }
   },
   "v1.DeploymentCauseImageTrigger": {
    "id": "v1.DeploymentCauseImageTrigger",
    "required": [
     "from"
    ],
    "properties": {
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "a reference the changed object which triggered a deployment"
     }
    }
   },
   "v1.GroupList": {
    "id": "v1.GroupList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Group"
      },
      "description": "list of groups"
     }
    }
   },
   "v1.Group": {
    "id": "v1.Group",
    "required": [
     "users"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "users": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of users in this group"
     }
    }
   },
   "v1.HostSubnetList": {
    "id": "v1.HostSubnetList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.HostSubnet"
      },
      "description": "list of host subnets"
     }
    }
   },
   "v1.HostSubnet": {
    "id": "v1.HostSubnet",
    "required": [
     "host",
     "hostIP",
     "subnet"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "host": {
      "type": "string",
      "description": "Name of the host that is registered at the master. A lease will be sought after this name."
     },
     "hostIP": {
      "type": "string",
      "description": "IP address to be used as vtep by other hosts in the overlay network"
     },
     "subnet": {
      "type": "string",
      "description": "Actual subnet CIDR lease assigned to the host"
     }
    }
   },
   "v1.IdentityList": {
    "id": "v1.IdentityList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Identity"
      },
      "description": "list of identities"
     }
    }
   },
   "v1.Identity": {
    "id": "v1.Identity",
    "required": [
     "providerName",
     "providerUserName",
     "user"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "providerName": {
      "type": "string",
      "description": "source of identity information"
     },
     "providerUserName": {
      "type": "string",
      "description": "uniquely represents this identity in the scope of the provider"
     },
     "user": {
      "$ref": "v1.ObjectReference",
      "description": "reference to the user this identity is associated with.  both name and uid must be set"
     },
     "extra": {
      "type": "any",
      "description": "extra information for this identity"
     }
    }
   },
   "v1.ImageList": {
    "id": "v1.ImageList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Image"
      },
      "description": "list of image objects"
     }
    }
   },
   "v1.Image": {
    "id": "v1.Image",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "dockerImageReference": {
      "type": "string",
      "description": "string that can be used to pull this image"
     },
     "dockerImageMetadata": {
      "type": "string",
      "description": "metadata about this image"
     },
     "dockerImageMetadataVersion": {
      "type": "string",
      "description": "conveys version of the object, if empty defaults to '1.0'"
     },
     "dockerImageManifest": {
      "type": "string",
      "description": "raw JSON of the manifest"
     }
    }
   },
   "v1.ImageStreamImage": {
    "id": "v1.ImageStreamImage",
    "required": [
     "image"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "image": {
      "$ref": "v1.Image",
      "description": "the image associated with the ImageStream and image name"
     }
    }
   },
   "v1.ImageStreamMapping": {
    "id": "v1.ImageStreamMapping",
    "required": [
     "image",
     "tag"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "image": {
      "$ref": "v1.Image",
      "description": "a Docker image"
     },
     "tag": {
      "type": "string",
      "description": "string value this image can be located with inside the stream"
     }
    }
   },
   "v1.ImageStreamList": {
    "id": "v1.ImageStreamList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.ImageStream"
      },
      "description": "list of image stream objects"
     }
    }
   },
   "v1.ImageStream": {
    "id": "v1.ImageStream",
    "required": [
     "spec"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "spec": {
      "$ref": "v1.ImageStreamSpec",
      "description": "desired state of the stream"
     },
     "status": {
      "$ref": "v1.ImageStreamStatus",
      "description": "current state of the stream as observed by the system"
     }
    }
   },
   "v1.ImageStreamSpec": {
    "id": "v1.ImageStreamSpec",
    "properties": {
     "dockerImageRepository": {
      "type": "string",
      "description": "optional field if specified this stream is backed by a Docker repository on this server"
     },
     "tags": {
      "type": "array",
      "items": {
       "$ref": "v1.NamedTagReference"
      },
      "description": "map arbitrary string values to specific image locators"
     }
    }
   },
   "v1.NamedTagReference": {
    "id": "v1.NamedTagReference",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of tag"
     },
     "annotations": {
      "type": "any",
      "description": "annotations associated with images using this tag"
     },
     "from": {
      "$ref": "v1.ObjectReference",
      "description": "a reference to an image stream tag or image stream this tag should track"
     }
    }
   },
   "v1.ImageStreamStatus": {
    "id": "v1.ImageStreamStatus",
    "required": [
     "dockerImageRepository"
    ],
    "properties": {
     "dockerImageRepository": {
      "type": "string",
      "description": "represents the effective location this stream may be accessed at, may be empty until the server determines where the repository is located"
     },
     "tags": {
      "type": "array",
      "items": {
       "$ref": "v1.NamedTagEventList"
      },
      "description": "historical record of images associated with each tag, the first entry is the currently tagged image"
     }
    }
   },
   "v1.NamedTagEventList": {
    "id": "v1.NamedTagEventList",
    "required": [
     "tag",
     "items"
    ],
    "properties": {
     "tag": {
      "type": "string",
      "description": "the tag"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.TagEvent"
      },
      "description": "list of tag events related to the tag"
     }
    }
   },
   "v1.TagEvent": {
    "id": "v1.TagEvent",
    "required": [
     "created",
     "dockerImageReference",
     "image"
    ],
    "properties": {
     "created": {
      "type": "string",
      "format": "date-time",
      "description": "when the event was created"
     },
     "dockerImageReference": {
      "type": "string",
      "description": "the string that can be used to pull this image"
     },
     "image": {
      "type": "string",
      "description": "the image"
     }
    }
   },
   "v1.ImageStreamTag": {
    "id": "v1.ImageStreamTag",
    "required": [
     "image"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "image": {
      "$ref": "v1.Image",
      "description": "the image associated with the ImageStream and tag"
     }
    }
   },
   "v1.NetNamespaceList": {
    "id": "v1.NetNamespaceList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.NetNamespace"
      },
      "description": "list of net namespaces"
     }
    }
   },
   "v1.NetNamespace": {
    "id": "v1.NetNamespace",
    "required": [
     "netname",
     "netid"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "netname": {
      "type": "string",
      "description": "Name of the network namespace."
     },
     "netid": {
      "type": "uint",
      "description": "NetID of the network namespace assigned to each overlay network packet."
     }
    }
   },
   "v1.OAuthAccessTokenList": {
    "id": "v1.OAuthAccessTokenList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.OAuthAccessToken"
      },
      "description": "list of oauth access tokens"
     }
    }
   },
   "v1.OAuthAccessToken": {
    "id": "v1.OAuthAccessToken",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "clientName": {
      "type": "string",
      "description": "references the client that created this token"
     },
     "expiresIn": {
      "type": "integer",
      "format": "int64",
      "description": "is the seconds from creation time before this token expires"
     },
     "scopes": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of requested scopes"
     },
     "redirectURI": {
      "type": "string",
      "description": "redirection URI associated with the token"
     },
     "userName": {
      "type": "string",
      "description": "user name associated with this token"
     },
     "userUID": {
      "type": "string",
      "description": "unique UID associated with this token"
     },
     "authorizeToken": {
      "type": "string",
      "description": "contains the token that authorized this token"
     },
     "refreshToken": {
      "type": "string",
      "description": "optional value by which this token can be renewed"
     }
    }
   },
   "v1.OAuthAuthorizeTokenList": {
    "id": "v1.OAuthAuthorizeTokenList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.OAuthAuthorizeToken"
      },
      "description": "list of oauth authorization tokens"
     }
    }
   },
   "v1.OAuthAuthorizeToken": {
    "id": "v1.OAuthAuthorizeToken",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "clientName": {
      "type": "string",
      "description": "references the client that created this token"
     },
     "expiresIn": {
      "type": "integer",
      "format": "int64",
      "description": "seconds from creation time before this token expires"
     },
     "scopes": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of requested scopes"
     },
     "redirectURI": {
      "type": "string",
      "description": "redirection URI associated with the token"
     },
     "state": {
      "type": "string",
      "description": "state data from request"
     },
     "userName": {
      "type": "string",
      "description": "user name associated with this token"
     },
     "userUID": {
      "type": "string",
      "description": "unique UID associated with this token.  userUID and userName must both match for this token to be valid"
     }
    }
   },
   "v1.OAuthClientAuthorizationList": {
    "id": "v1.OAuthClientAuthorizationList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.OAuthClientAuthorization"
      },
      "description": "list of oauth client authorizations"
     }
    }
   },
   "v1.OAuthClientAuthorization": {
    "id": "v1.OAuthClientAuthorization",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "clientName": {
      "type": "string",
      "description": "references the client that created this authorization"
     },
     "userName": {
      "type": "string",
      "description": "user name that authorized this client"
     },
     "userUID": {
      "type": "string",
      "description": "unique UID associated with this authorization. userUID and userName must both match for this authorization to be valid"
     },
     "scopes": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of granted scopes"
     }
    }
   },
   "v1.OAuthClientList": {
    "id": "v1.OAuthClientList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.OAuthClient"
      },
      "description": "list of oauth clients"
     }
    }
   },
   "v1.OAuthClient": {
    "id": "v1.OAuthClient",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "secret": {
      "type": "string",
      "description": "unique secret associated with a client"
     },
     "respondWithChallenges": {
      "type": "boolean",
      "description": "indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects"
     },
     "redirectURIs": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "valid redirection URIs associated with a client"
     }
    }
   },
   "v1.PolicyList": {
    "id": "v1.PolicyList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Policy"
      },
      "description": "list of policies"
     }
    }
   },
   "v1.Policy": {
    "id": "v1.Policy",
    "required": [
     "lastModified",
     "roles"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "lastModified": {
      "type": "string",
      "format": "date-time",
      "description": "last time that any part of the policy was created, updated, or deleted"
     },
     "roles": {
      "type": "array",
      "items": {
       "$ref": "v1.NamedRole"
      },
      "description": "roles held by this policy"
     }
    }
   },
   "v1.NamedRole": {
    "id": "v1.NamedRole",
    "required": [
     "name",
     "role"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the role"
     },
     "role": {
      "$ref": "v1.Role",
      "description": "the role"
     }
    }
   },
   "v1.Role": {
    "id": "v1.Role",
    "required": [
     "rules"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "rules": {
      "type": "array",
      "items": {
       "$ref": "v1.PolicyRule"
      },
      "description": "all the rules for this role"
     }
    }
   },
   "v1.PolicyBindingList": {
    "id": "v1.PolicyBindingList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.PolicyBinding"
      },
      "description": "list of policy bindings"
     }
    }
   },
   "v1.PolicyBinding": {
    "id": "v1.PolicyBinding",
    "required": [
     "lastModified",
     "policyRef",
     "roleBindings"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "lastModified": {
      "type": "string",
      "format": "date-time",
      "description": "last time that any part of the object was created, updated, or deleted"
     },
     "policyRef": {
      "$ref": "v1.ObjectReference",
      "description": "reference to the policy that contains all the Roles that this object's roleBindings may reference"
     },
     "roleBindings": {
      "type": "array",
      "items": {
       "$ref": "v1.NamedRoleBinding"
      },
      "description": "all roleBindings held by this policyBinding"
     }
    }
   },
   "v1.NamedRoleBinding": {
    "id": "v1.NamedRoleBinding",
    "required": [
     "name",
     "roleBinding"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the roleBinding"
     },
     "roleBinding": {
      "$ref": "v1.RoleBinding",
      "description": "the roleBinding"
     }
    }
   },
   "v1.RoleBinding": {
    "id": "v1.RoleBinding",
    "required": [
     "userNames",
     "groupNames",
     "roleRef"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "userNames": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "all the usernames directly bound to the role"
     },
     "groupNames": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "all the groups directly bound to the role"
     },
     "roleRef": {
      "$ref": "v1.ObjectReference",
      "description": "a reference to a role"
     }
    }
   },
   "v1.Template": {
    "id": "v1.Template",
    "required": [
     "objects"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "objects": {
      "type": "array",
      "items": {
       "$ref": "runtime.RawExtension"
      },
      "description": "list of objects to include in the template"
     },
     "parameters": {
      "type": "array",
      "items": {
       "$ref": "v1.Parameter"
      },
      "description": "optional: list of parameters used during template to config transformation"
     },
     "labels": {
      "type": "any",
      "description": "optional: list of lables that are applied to every object during the template to config transformation"
     }
    }
   },
   "runtime.RawExtension": {
    "id": "runtime.RawExtension",
    "description": "this may be any JSON object with a 'kind' and 'apiVersion' field; and is preserved unmodified by processing",
    "properties": {}
   },
   "integer": {
    "id": "integer",
    "properties": {}
   },
   "v1.Parameter": {
    "id": "v1.Parameter",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the parameter"
     },
     "description": {
      "type": "string",
      "description": "optional: describes the parameter"
     },
     "value": {
      "type": "string",
      "description": "optional: holds the parameter data.  if specified, the generator is ignored.  the value replaces all occurrences of the parameter ${Name} expression during template to config transformation"
     },
     "generate": {
      "type": "string",
      "description": "optional: generate specifies the generator to be used to generate random string from an input value specified by the from field.  the result string is stored in the value field. if not specified, the value field is untouched"
     },
     "from": {
      "type": "string",
      "description": "input value for the generator"
     },
     "required": {
      "type": "boolean",
      "description": "indicates the parameter must have a non-empty value or be generated"
     }
    }
   },
   "v1.ProjectRequest": {
    "id": "v1.ProjectRequest",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "displayName": {
      "type": "string",
      "description": "display name to apply to a project"
     },
     "description": {
      "type": "string",
      "description": "description to apply to a project"
     }
    }
   },
   "v1.ProjectList": {
    "id": "v1.ProjectList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Project"
      },
      "description": "list of projects"
     }
    }
   },
   "v1.Project": {
    "id": "v1.Project",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "spec": {
      "$ref": "v1.ProjectSpec",
      "description": "spec defines the behavior of the Project"
     },
     "status": {
      "$ref": "v1.ProjectStatus",
      "description": "status describes the current status of a Project; read-only"
     }
    }
   },
   "v1.ProjectSpec": {
    "id": "v1.ProjectSpec",
    "properties": {
     "finalizers": {
      "type": "array",
      "items": {
       "$ref": "v1.FinalizerName"
      },
      "description": "an opaque list of values that must be empty to permanently remove object from storage"
     }
    }
   },
   "v1.FinalizerName": {
    "id": "v1.FinalizerName",
    "properties": {}
   },
   "v1.ProjectStatus": {
    "id": "v1.ProjectStatus",
    "properties": {
     "phase": {
      "type": "string",
      "description": "phase is the current lifecycle phase of the project"
     }
    }
   },
   "v1.ResourceAccessReview": {
    "id": "v1.ResourceAccessReview",
    "required": [
     "verb",
     "resource"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "verb": {
      "type": "string",
      "description": "one of get, list, watch, create, update, delete"
     },
     "resource": {
      "type": "string",
      "description": "one of the existing resource types"
     },
     "content": {
      "type": "string",
      "description": "actual content of the request for a create or update"
     },
     "resourceName": {
      "type": "string",
      "description": "name of the resource being requested for a get or delete operation"
     }
    }
   },
   "v1.RoleBindingList": {
    "id": "v1.RoleBindingList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.RoleBinding"
      },
      "description": "list of role bindings"
     }
    }
   },
   "v1.RoleList": {
    "id": "v1.RoleList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Role"
      },
      "description": "list of roles"
     }
    }
   },
   "v1.Route": {
    "id": "v1.Route",
    "required": [
     "spec",
     "status"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "spec": {
      "$ref": "v1.RouteSpec",
      "description": "desired state of the route"
     },
     "status": {
      "$ref": "v1.RouteStatus",
      "description": "current state of the route"
     }
    }
   },
   "v1.RouteSpec": {
    "id": "v1.RouteSpec",
    "required": [
     "host",
     "to"
    ],
    "properties": {
     "host": {
      "type": "string",
      "description": "optional: alias/dns that points to the service, must follow DNS 952 subdomain conventions"
     },
     "path": {
      "type": "string",
      "description": "optional: path that the router watches to route traffic to the service"
     },
     "to": {
      "$ref": "v1.ObjectReference",
      "description": "an object the route points to.  only the service kind is allowed, and it will be defaulted to a service."
     },
     "tls": {
      "$ref": "v1.TLSConfig",
      "description": "provides the ability to configure certificates and termination for the route"
     }
    }
   },
   "v1.TLSConfig": {
    "id": "v1.TLSConfig",
    "properties": {
     "termination": {
      "type": "string",
      "description": "indicates termination type.  if not set, any termination config will be ignored"
     },
     "certificate": {
      "type": "string",
      "description": "provides certificate contents"
     },
     "key": {
      "type": "string",
      "description": "provides key file contents"
     },
     "caCertificate": {
      "type": "string",
      "description": "provides the cert authority certificate contents"
     },
     "destinationCACertificate": {
      "type": "string",
      "description": "provides the contents of the ca certificate of the final destination.  When using re-encrypt termination this file should be provided in order to have routers use it for health checks on the secure connection"
     }
    }
   },
   "v1.RouteStatus": {
    "id": "v1.RouteStatus",
    "properties": {}
   },
   "v1.SubjectAccessReview": {
    "id": "v1.SubjectAccessReview",
    "required": [
     "verb",
     "resource",
     "user",
     "groups",
     "resourceName"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "verb": {
      "type": "string",
      "description": "one of get, list, watch, create, update, delete"
     },
     "resource": {
      "type": "string",
      "description": "one of the existing resource types"
     },
     "user": {
      "type": "string",
      "description": "optional, if both user and groups are empty, the current authenticated user is used"
     },
     "groups": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "optional, list of groups to which the user belongs"
     },
     "content": {
      "type": "string",
      "description": "actual content of the request for create and update"
     },
     "resourceName": {
      "type": "string",
      "description": "name of the resource being requested for a get or delete"
     }
    }
   },
   "v1.TemplateList": {
    "id": "v1.TemplateList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.Template"
      },
      "description": "list of templates"
     }
    }
   },
   "v1.UserIdentityMapping": {
    "id": "v1.UserIdentityMapping",
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "identity": {
      "$ref": "v1.ObjectReference",
      "description": "reference to an identity"
     },
     "user": {
      "$ref": "v1.ObjectReference",
      "description": "reference to a user"
     }
    }
   },
   "v1.UserList": {
    "id": "v1.UserList",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.User"
      },
      "description": "list of users"
     }
    }
   },
   "v1.User": {
    "id": "v1.User",
    "required": [
     "identities",
     "groups"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "fullName": {
      "type": "string",
      "description": "full name of user"
     },
     "identities": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of identities"
     },
     "groups": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "list of groups"
     }
    }
   },
   "patch.Object": {
    "id": "",
    "description": "represents an object patch, which may be any of: JSON patch (RFC 6902), JSON merge patch (RFC 7396), or the Kubernetes strategic merge patch",
    "properties": {}
   }
  }
 }