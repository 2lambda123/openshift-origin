{{/* begin haproxy config template */}}
{{ define "/var/lib/haproxy/conf/haproxy.config" }}
global
  # maxconn 4096
  user haproxy
  group haproxy
  daemon
  ca-base /etc/ssl
  crt-base /etc/ssl
  stats socket /var/lib/haproxy/run/haproxy.sock mode 600 level admin
  stats timeout 2m

defaults
  # maxconn 4096
  mode http
  # Add x-forwarded-for header.
  timeout connect 5s
  timeout client 30s
  timeout server 30s
  # Long timeout for WebSocket connections.
  timeout tunnel 1h

frontend public
  bind :80
  mode http
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP

  acl is_ws hdr(Upgrade) -i WebSocket
  # websocket traffic, no ssl
  use_backend be_ws_%[hdr(host),map(/var/lib/haproxy/conf/host_be_ws.map)] if is_ws

  # http traffic
  use_backend be_%[hdr(host),map(/var/lib/haproxy/conf/host_be.map)] if TRUE
  default_backend openshift_default

frontend public_ssl
  bind :443
  mode tcp
  tcp-request  inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  # check if there is an sni header that matches those that want an sni based passthrough
  use_backend be_sni_%[req_ssl_sni,map(/var/lib/haproxy/conf/host_be_sni.map)] if TRUE
  default_backend be_no_sni

##------------- helper frontends/backends to dissect ssl/sni ----
#TODO : handle wss

frontend fe_no_sni
  # terminate ssl on edge
  bind 127.0.0.1:10443 ssl crt /var/lib/haproxy/conf/default_pub_keys.pem accept-proxy

  # re-ssl?
  use_backend be_ressl_%[hdr(host),map(/var/lib/haproxy/conf/host_be_ressl.map)] if TRUE

  # regular http
  use_backend be_%[hdr(host),map(/var/lib/haproxy/conf/host_be.map)] if TRUE

  default_backend openshift_default

# backend for when sni does not exist, or ssl term needs to happen on the edge
backend be_no_sni
  mode tcp
  server fe_no_sni 127.0.0.1:10443 weight 1 send-proxy

backend openshift_default
  mode http
  option forwardfor
  #option http-keep-alive
  option http-pretend-keepalive
  server openshift_backend 127.0.0.1:8080

##-------------- app level backends ----------------

{{   range $id, $frontend := . }}
backend be_{{$id}} mode http
  balance leastconn
  timeout check 5000ms
{{     range $endpointID, $endpoint := $frontend.EndpointTable }}
  server {{$id}} {{$endpoint.IP}}:{{$endpoint.Port}} check inter 5000ms
{{     end }}
{{   end }}
{{ end }}{{/* end haproxy config template */}}

{{/* begin host map template */}}
{{ define "/var/lib/haproxy/conf/host_be.map" }}
{{   range $id, $frontend := . }}
{{     range $idx, $host := $frontend.HostAliases }}
{{       if ne $host "" }}
{{$host}} {{$id}}
{{       end }}
{{     end }}
{{   end }}
{{ end }}{{/* end host map template */}}
