#!/bin/bash -xu

script=$(basename "${BASH_SOURCE[0]}")
declare -i -r default_coalesce_interval=15   #  default 15 secs.
declare -i -r coalesce_max_wait=$((5 * 60))  #  5 minutes
interval=${RELOAD_COALESCE_INTERVAL:-"$default_coalesce_interval"}

config_file=/var/lib/haproxy/conf/haproxy.config
run_dir=/var/lib/haproxy/run
pid_file=$run_dir/haproxy.pid
coalesce_lock="$run_dir/${script}.coalesce.lock"
reload_lock="$run_dir/${script}.lock"
old_pid=""
haproxy_conf_dir=/var/lib/haproxy/conf


function _cleanup() {
  [ -d "$coalesce_lock" ] && rmdir "$coalesce_lock"
  exit 0
}


function coalesce_reloads() {
  local reloadts=0
  [ -f "$reload_lock" ] && reloadts=$(stat -c "%Y" "$reload_lock")

  if ! mkdir "$coalesce_lock"; then
    echo  "  - Exiting as another haproxy reload is pending."
    exit 0
  fi

  trap _cleanup KILL ERR QUIT TERM EXIT INT

  #  Ensure interval is a valid number and under max wait time (5 mins).
  [[ $interval =~ ^-?[0-9]+$ ]] || interval=$default_coalesce_interval
  [ $interval -gt $coalesce_max_wait ] && interval=$coalesce_max_wait

  #  Get time difference from the last reload.
  local now=$(date +%s)
  local timediff=$(( $now - $reloadts))

  #  Sleep for 'x' secs  where 0 <= x < interval ( <= coalesce_max_wait).
  [ $interval -ge $timediff ] && sleep $((interval - timediff))

  rmdir "$coalesce_lock"

}  #  End of function  coalesce_reloads.


function lock_and_reload_haproxy() {
  local hapid=0

  [ -f "$reload_lock" ] && hapid=$(<"$reload_lock")

  if [ -n "$hapid" ]  &&  ! kill -0 $hapid; then
    rm -f "$reload_lock"   #  stale pid.
  fi

  #  Ensure only 1 reload runs a time with flock.
  (
     flock 42

     function _onexit() {
       flock -x -u -n 42
       echo "" > "$reload_lock"
     }

     trap _onexit KILL ERR QUIT TERM EXIT INT

     echo "$$" > "$reload_lock"

     if [ -f $pid_file ]; then
       old_pid=$(<$pid_file)
     fi

     if [ -n "$old_pid" ]; then
       /usr/sbin/haproxy -f $config_file -p $pid_file -sf $old_pid
     else
       /usr/sbin/haproxy -f $config_file -p $pid_file
     fi

     _onexit

  ) 42> "$reload_lock"

  flock -x -u "$reload_lock" id &> /dev/null

}  #  End of function  lock_and_reload_haproxy.


# sort the path based map files for the haproxy map_beg function
for mapfile in "$haproxy_conf_dir"/*.map; do
  sort -r "$mapfile" -o "$mapfile"
done

coalesce_reloads

lock_and_reload_haproxy
