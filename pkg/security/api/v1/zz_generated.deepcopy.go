// +build !ignore_autogenerated_openshift

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	api_v1 "k8s.io/kubernetes/pkg/api/v1"
	reflect "reflect"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicyReview, InType: reflect.TypeOf(&PodSecurityPolicyReview{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicyReviewSpec, InType: reflect.TypeOf(&PodSecurityPolicyReviewSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicyReviewStatus, InType: reflect.TypeOf(&PodSecurityPolicyReviewStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicySelfSubjectReview, InType: reflect.TypeOf(&PodSecurityPolicySelfSubjectReview{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicySelfSubjectReviewSpec, InType: reflect.TypeOf(&PodSecurityPolicySelfSubjectReviewSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicySubjectReview, InType: reflect.TypeOf(&PodSecurityPolicySubjectReview{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicySubjectReviewSpec, InType: reflect.TypeOf(&PodSecurityPolicySubjectReviewSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodSecurityPolicySubjectReviewStatus, InType: reflect.TypeOf(&PodSecurityPolicySubjectReviewStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ServiceAccountPodSecurityPolicyReviewStatus, InType: reflect.TypeOf(&ServiceAccountPodSecurityPolicyReviewStatus{})},
	)
}

func DeepCopy_v1_PodSecurityPolicyReview(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicyReview)
		out := out.(*PodSecurityPolicyReview)
		*out = *in
		if err := DeepCopy_v1_PodSecurityPolicyReviewSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_PodSecurityPolicyReviewStatus(&in.Status, &out.Status, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_PodSecurityPolicyReviewSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicyReviewSpec)
		out := out.(*PodSecurityPolicyReviewSpec)
		*out = *in
		if err := api_v1.DeepCopy_v1_PodTemplateSpec(&in.Template, &out.Template, c); err != nil {
			return err
		}
		if in.ServiceAccountNames != nil {
			in, out := &in.ServiceAccountNames, &out.ServiceAccountNames
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_PodSecurityPolicyReviewStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicyReviewStatus)
		out := out.(*PodSecurityPolicyReviewStatus)
		*out = *in
		if in.AllowedServiceAccounts != nil {
			in, out := &in.AllowedServiceAccounts, &out.AllowedServiceAccounts
			*out = make([]ServiceAccountPodSecurityPolicyReviewStatus, len(*in))
			for i := range *in {
				if err := DeepCopy_v1_ServiceAccountPodSecurityPolicyReviewStatus(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		return nil
	}
}

func DeepCopy_v1_PodSecurityPolicySelfSubjectReview(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicySelfSubjectReview)
		out := out.(*PodSecurityPolicySelfSubjectReview)
		*out = *in
		if err := DeepCopy_v1_PodSecurityPolicySelfSubjectReviewSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_PodSecurityPolicySubjectReviewStatus(&in.Status, &out.Status, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_PodSecurityPolicySelfSubjectReviewSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicySelfSubjectReviewSpec)
		out := out.(*PodSecurityPolicySelfSubjectReviewSpec)
		*out = *in
		if err := api_v1.DeepCopy_v1_PodTemplateSpec(&in.Template, &out.Template, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_PodSecurityPolicySubjectReview(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicySubjectReview)
		out := out.(*PodSecurityPolicySubjectReview)
		*out = *in
		if err := DeepCopy_v1_PodSecurityPolicySubjectReviewSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_PodSecurityPolicySubjectReviewStatus(&in.Status, &out.Status, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_PodSecurityPolicySubjectReviewSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicySubjectReviewSpec)
		out := out.(*PodSecurityPolicySubjectReviewSpec)
		*out = *in
		if err := api_v1.DeepCopy_v1_PodTemplateSpec(&in.Template, &out.Template, c); err != nil {
			return err
		}
		if in.Groups != nil {
			in, out := &in.Groups, &out.Groups
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_PodSecurityPolicySubjectReviewStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodSecurityPolicySubjectReviewStatus)
		out := out.(*PodSecurityPolicySubjectReviewStatus)
		*out = *in
		if in.AllowedBy != nil {
			in, out := &in.AllowedBy, &out.AllowedBy
			*out = new(api_v1.ObjectReference)
			**out = **in
		}
		if err := api_v1.DeepCopy_v1_PodTemplateSpec(&in.Template, &out.Template, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_ServiceAccountPodSecurityPolicyReviewStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ServiceAccountPodSecurityPolicyReviewStatus)
		out := out.(*ServiceAccountPodSecurityPolicyReviewStatus)
		*out = *in
		if err := DeepCopy_v1_PodSecurityPolicySubjectReviewStatus(&in.PodSecurityPolicySubjectReviewStatus, &out.PodSecurityPolicySubjectReviewStatus, c); err != nil {
			return err
		}
		return nil
	}
}
