package v1

// This file contains methods that can be used by the go-restful package to generate Swagger
// documentation for the object types found in 'types.go' This file is automatically generated
// by hack/update-generated-swagger-descriptions.sh and should be run after a full build of OpenShift.
// ==== DO NOT EDIT THIS FILE MANUALLY ====

var map_ConstrainPodNodeSelectorEffect = map[string]string{
	"":    "ConstrainPodNodeSelectorEffect alters a resource by applying a node selector.",
	"add": "Add is a set of labels to overwrite the labels on the resource.",
}

func (ConstrainPodNodeSelectorEffect) SwaggerDoc() map[string]string {
	return map_ConstrainPodNodeSelectorEffect
}

var map_ConsumeResourceEffect = map[string]string{
	"":     "ConsumeResourceEffect alters a resource by adding / setting resources.",
	"name": "Name is the name of a quantity to set on each matching container. May not be specified if NameFromImageAnnotation or NameFromDockerImageLabel is set.",
	"nameFromImageAnnotation":      "NameFromImageAnnotation is the name of an image annotation to use to set the name of the resource quantity on each matching container. May not be specified if Name or NameFromDockerImageLabel is set.",
	"nameFromDockerImageLabel":     "NameFromDockerImageLabel is the name of a docker image label to use to set the name of the resource quantity on each matching container. May not be specified if Name or NameFromImageAnnotation is set.",
	"quantity":                     "Quantity is the amount of quantity to set",
	"quantityFromImageAnnotation":  "QuantityFromImageAnnotation is the key on an image annotation to use for the value of this resource. If this value is specified and no annotation is found, the value of Quantity is used instead.",
	"quantityFromDockerImageLabel": "QuantityFromDockerImageLabel is the key on a docker image label to use for the value of this resource. If this value is specified and no annotation is found, the value of Quantity is used instead.",
}

func (ConsumeResourceEffect) SwaggerDoc() map[string]string {
	return map_ConsumeResourceEffect
}

var map_ImageCondition = map[string]string{
	"":     "ImageCondition defines the conditions for matching a particular image source. The conditions below are all required (logical AND). If Reject is specified, the condition is false if all conditions match, and true otherwise.",
	"name": "Name is the name of this policy rule for reference. It must be unique across all rules.",
	"ignoreNamespaceOverride": "IgnoreNamespaceOverride prevents this condition from being overriden when the `alpha.image.policy.openshift.io/ignore-rules` is set on a namespace and contains this rule name.",
	"reject":                  "Reject indicates this rule is inverted - if all conditions below match, then this rule is considered to not match.",
	"onResources":             "OnResources determines which resources this applies to. Defaults to 'pods' for ImageExecutionPolicyRules.",
	"matchIntegratedRegistry": "MatchIntegratedRegistry will only match image sources that originate from the configured integrated registry.",
	"matchRegistries":         "MatchRegistries will match image references that point to the provided registries",
	"allowResolutionFailure":  "AllowResolutionFailure allows the subsequent conditions to be bypassed if the integrated registry does not have access to image metadata (no image exists matching the image digest).",
	"matchDockerImageLabels":  "MatchDockerImageLabels checks against the resolved image for the presence of a Docker label",
	"matchImageLabels":        "MatchImageLabels checks against the resolved image for a label.",
	"matchImageAnnotations":   "MatchImageAnnotations checks against the resolved image for an annotation.",
}

func (ImageCondition) SwaggerDoc() map[string]string {
	return map_ImageCondition
}

var map_ImageConsumptionPolicyRule = map[string]string{
	"":    "ImageConsumptionPolicyRule, when matching an image, adds a counted resource to the object.",
	"add": "Add defines an array of resources that are applied if this rule matches. The resources are added to each container (or other resource bearing object).",
}

func (ImageConsumptionPolicyRule) SwaggerDoc() map[string]string {
	return map_ImageConsumptionPolicyRule
}

var map_ImageExecutionPolicyRule = map[string]string{
	"":        "ImageExecutionPolicyRule determines whether a provided image may be used on the platform.",
	"resolve": "Resolve indicates that images referenced by this resource must be resolved",
}

func (ImageExecutionPolicyRule) SwaggerDoc() map[string]string {
	return map_ImageExecutionPolicyRule
}

var map_ImagePlacementPolicyRule = map[string]string{
	"":          "ImagePlacementPolicyRule, when matching an image, applies the provided tolerations or taints.",
	"constrain": "Constrain restricts the node selector for this resource.",
	"tolerate":  "Tolerate adds tolerations to this resource.",
}

func (ImagePlacementPolicyRule) SwaggerDoc() map[string]string {
	return map_ImagePlacementPolicyRule
}

var map_ImagePolicyConfig = map[string]string{
	"":               "ImagePolicyConfig is the configuration for control of images running on the platform.",
	"executionRules": "ExecutionRules determine whether the use of an image is allowed in an object with a pod spec. By default, these rules only apply to pods, but may be extended to other resource types. If all execution rules are negations, the default behavior is allow all. If any execution rule is an allow, the default behavior is to reject all.",
}

func (ImagePolicyConfig) SwaggerDoc() map[string]string {
	return map_ImagePolicyConfig
}

var map_SignatureMatch = map[string]string{
	"": "SignatureMatch is not yet enabled",
}

func (SignatureMatch) SwaggerDoc() map[string]string {
	return map_SignatureMatch
}

var map_TolerateNodeSelectorEffect = map[string]string{
	"":    "TolerateNodeSelectorEffect alters a resource by applying a node toleration.",
	"add": "Add is the toleration to add.",
}

func (TolerateNodeSelectorEffect) SwaggerDoc() map[string]string {
	return map_TolerateNodeSelectorEffect
}

var map_ValueCondition = map[string]string{
	"":      "ValueCondition reflects whether the following key in a map is set or has a given value.",
	"key":   "Key is the name of a key in a map to retrieve.",
	"set":   "Set indicates the provided key exists in the map. This field is exclusive with Value.",
	"value": "Value indicates the provided key has the given value. This field is exclusive with Set.",
}

func (ValueCondition) SwaggerDoc() map[string]string {
	return map_ValueCondition
}
