// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/openshift/origin/pkg/project/apis/project/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectReservationLister helps list ProjectReservations.
type ProjectReservationLister interface {
	// List lists all ProjectReservations in the indexer.
	List(selector labels.Selector) (ret []*v1.ProjectReservation, err error)
	// Get retrieves the ProjectReservation from the index for a given name.
	Get(name string) (*v1.ProjectReservation, error)
	ProjectReservationListerExpansion
}

// projectReservationLister implements the ProjectReservationLister interface.
type projectReservationLister struct {
	indexer cache.Indexer
}

// NewProjectReservationLister returns a new ProjectReservationLister.
func NewProjectReservationLister(indexer cache.Indexer) ProjectReservationLister {
	return &projectReservationLister{indexer: indexer}
}

// List lists all ProjectReservations in the indexer.
func (s *projectReservationLister) List(selector labels.Selector) (ret []*v1.ProjectReservation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProjectReservation))
	})
	return ret, err
}

// Get retrieves the ProjectReservation from the index for a given name.
func (s *projectReservationLister) Get(name string) (*v1.ProjectReservation, error) {
	key := &v1.ProjectReservation{ObjectMeta: meta_v1.ObjectMeta{Name: name}}
	obj, exists, err := s.indexer.Get(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("projectreservation"), name)
	}
	return obj.(*v1.ProjectReservation), nil
}
