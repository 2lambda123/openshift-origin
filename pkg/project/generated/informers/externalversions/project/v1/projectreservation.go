// This file was automatically generated by informer-gen

package v1

import (
	project_v1 "github.com/openshift/origin/pkg/project/apis/project/v1"
	clientset "github.com/openshift/origin/pkg/project/generated/clientset"
	internalinterfaces "github.com/openshift/origin/pkg/project/generated/informers/externalversions/internalinterfaces"
	v1 "github.com/openshift/origin/pkg/project/generated/listers/project/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// ProjectReservationInformer provides access to a shared informer and lister for
// ProjectReservations.
type ProjectReservationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.ProjectReservationLister
}

type projectReservationInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

func newProjectReservationInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	sharedIndexInformer := cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.ProjectV1().ProjectReservations().List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.ProjectV1().ProjectReservations().Watch(options)
			},
		},
		&project_v1.ProjectReservation{},
		resyncPeriod,
		cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
	)

	return sharedIndexInformer
}

func (f *projectReservationInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&project_v1.ProjectReservation{}, newProjectReservationInformer)
}

func (f *projectReservationInformer) Lister() v1.ProjectReservationLister {
	return v1.NewProjectReservationLister(f.Informer().GetIndexer())
}
