// +build !ignore_autogenerated_openshift

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1

import (
	api "github.com/openshift/origin/pkg/project/api"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	pkg_api "k8s.io/kubernetes/pkg/api"
	api_v1 "k8s.io/kubernetes/pkg/api/v1"
	unsafe "unsafe"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1_Project_To_api_Project,
		Convert_api_Project_To_v1_Project,
		Convert_v1_ProjectList_To_api_ProjectList,
		Convert_api_ProjectList_To_v1_ProjectList,
		Convert_v1_ProjectRequest_To_api_ProjectRequest,
		Convert_api_ProjectRequest_To_v1_ProjectRequest,
		Convert_v1_ProjectSpec_To_api_ProjectSpec,
		Convert_api_ProjectSpec_To_v1_ProjectSpec,
		Convert_v1_ProjectStatus_To_api_ProjectStatus,
		Convert_api_ProjectStatus_To_v1_ProjectStatus,
	)
}

func autoConvert_v1_Project_To_api_Project(in *Project, out *api.Project, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_ProjectSpec_To_api_ProjectSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_ProjectStatus_To_api_ProjectStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_Project_To_api_Project(in *Project, out *api.Project, s conversion.Scope) error {
	return autoConvert_v1_Project_To_api_Project(in, out, s)
}

func autoConvert_api_Project_To_v1_Project(in *api.Project, out *Project, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_api_ProjectSpec_To_v1_ProjectSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_api_ProjectStatus_To_v1_ProjectStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_Project_To_v1_Project(in *api.Project, out *Project, s conversion.Scope) error {
	return autoConvert_api_Project_To_v1_Project(in, out, s)
}

func autoConvert_v1_ProjectList_To_api_ProjectList(in *ProjectList, out *api.ProjectList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]api.Project)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_v1_ProjectList_To_api_ProjectList(in *ProjectList, out *api.ProjectList, s conversion.Scope) error {
	return autoConvert_v1_ProjectList_To_api_ProjectList(in, out, s)
}

func autoConvert_api_ProjectList_To_v1_ProjectList(in *api.ProjectList, out *ProjectList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items == nil {
		out.Items = make([]Project, 0)
	} else {
		out.Items = *(*[]Project)(unsafe.Pointer(&in.Items))
	}
	return nil
}

func Convert_api_ProjectList_To_v1_ProjectList(in *api.ProjectList, out *ProjectList, s conversion.Scope) error {
	return autoConvert_api_ProjectList_To_v1_ProjectList(in, out, s)
}

func autoConvert_v1_ProjectRequest_To_api_ProjectRequest(in *ProjectRequest, out *api.ProjectRequest, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.DisplayName = in.DisplayName
	out.Description = in.Description
	return nil
}

func Convert_v1_ProjectRequest_To_api_ProjectRequest(in *ProjectRequest, out *api.ProjectRequest, s conversion.Scope) error {
	return autoConvert_v1_ProjectRequest_To_api_ProjectRequest(in, out, s)
}

func autoConvert_api_ProjectRequest_To_v1_ProjectRequest(in *api.ProjectRequest, out *ProjectRequest, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.DisplayName = in.DisplayName
	out.Description = in.Description
	return nil
}

func Convert_api_ProjectRequest_To_v1_ProjectRequest(in *api.ProjectRequest, out *ProjectRequest, s conversion.Scope) error {
	return autoConvert_api_ProjectRequest_To_v1_ProjectRequest(in, out, s)
}

func autoConvert_v1_ProjectSpec_To_api_ProjectSpec(in *ProjectSpec, out *api.ProjectSpec, s conversion.Scope) error {
	out.Finalizers = *(*[]pkg_api.FinalizerName)(unsafe.Pointer(&in.Finalizers))
	return nil
}

func Convert_v1_ProjectSpec_To_api_ProjectSpec(in *ProjectSpec, out *api.ProjectSpec, s conversion.Scope) error {
	return autoConvert_v1_ProjectSpec_To_api_ProjectSpec(in, out, s)
}

func autoConvert_api_ProjectSpec_To_v1_ProjectSpec(in *api.ProjectSpec, out *ProjectSpec, s conversion.Scope) error {
	out.Finalizers = *(*[]api_v1.FinalizerName)(unsafe.Pointer(&in.Finalizers))
	return nil
}

func Convert_api_ProjectSpec_To_v1_ProjectSpec(in *api.ProjectSpec, out *ProjectSpec, s conversion.Scope) error {
	return autoConvert_api_ProjectSpec_To_v1_ProjectSpec(in, out, s)
}

func autoConvert_v1_ProjectStatus_To_api_ProjectStatus(in *ProjectStatus, out *api.ProjectStatus, s conversion.Scope) error {
	out.Phase = pkg_api.NamespacePhase(in.Phase)
	return nil
}

func Convert_v1_ProjectStatus_To_api_ProjectStatus(in *ProjectStatus, out *api.ProjectStatus, s conversion.Scope) error {
	return autoConvert_v1_ProjectStatus_To_api_ProjectStatus(in, out, s)
}

func autoConvert_api_ProjectStatus_To_v1_ProjectStatus(in *api.ProjectStatus, out *ProjectStatus, s conversion.Scope) error {
	out.Phase = api_v1.NamespacePhase(in.Phase)
	return nil
}

func Convert_api_ProjectStatus_To_v1_ProjectStatus(in *api.ProjectStatus, out *ProjectStatus, s conversion.Scope) error {
	return autoConvert_api_ProjectStatus_To_v1_ProjectStatus(in, out, s)
}
