// +build !ignore_autogenerated_openshift

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package api

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	pkg_api "k8s.io/kubernetes/pkg/api"
	reflect "reflect"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_Project, InType: reflect.TypeOf(&Project{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_ProjectList, InType: reflect.TypeOf(&ProjectList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_ProjectRequest, InType: reflect.TypeOf(&ProjectRequest{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_ProjectSpec, InType: reflect.TypeOf(&ProjectSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_ProjectStatus, InType: reflect.TypeOf(&ProjectStatus{})},
	)
}

func DeepCopy_api_Project(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Project)
		out := out.(*Project)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if err := DeepCopy_api_ProjectSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_api_ProjectList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ProjectList)
		out := out.(*ProjectList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]Project, len(*in))
			for i := range *in {
				if err := DeepCopy_api_Project(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		return nil
	}
}

func DeepCopy_api_ProjectRequest(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ProjectRequest)
		out := out.(*ProjectRequest)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		return nil
	}
}

func DeepCopy_api_ProjectSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ProjectSpec)
		out := out.(*ProjectSpec)
		*out = *in
		if in.Finalizers != nil {
			in, out := &in.Finalizers, &out.Finalizers
			*out = make([]pkg_api.FinalizerName, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_api_ProjectStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ProjectStatus)
		out := out.(*ProjectStatus)
		*out = *in
		return nil
	}
}
