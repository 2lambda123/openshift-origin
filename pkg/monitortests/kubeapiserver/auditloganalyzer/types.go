package auditloganalyzer

import (
	"context"
	"sync"
	"time"

	"github.com/openshift/origin/pkg/monitor/monitorapi"
	"github.com/openshift/origin/pkg/test/ginkgo/junitapi"
	auditv1 "k8s.io/apiserver/pkg/apis/audit/v1"
	"k8s.io/client-go/rest"
)

// AuditEventCollector wraps the Collect method and is the minimal interface
// needed when extending this cluster monitor with further analysis of audit log
// events.
//
// Collect will be invoked for every kube-apiserver audit log event in the cluster.
// Collect must not modify the audit log event.
type AuditEventCollector interface {
	Collect(*auditv1.Event)
}

// AuditEventCollectors is a composite of multiple AuditEventCollector objects.
//
// When Collect is invoked, Collect on each leaf is invoked in a separate
// goroutine and the composite Collect call blocks until all go routines are
// done.
type AuditEventCollectors []AuditEventCollector

func (c AuditEventCollectors) Collect(event *auditv1.Event) {
	var wg sync.WaitGroup
	for _, collector := range c {
		wg.Add(1)
		go func(collector AuditEventCollector) {
			defer wg.Done()
			collector.Collect(event)
		}(collector)
	}
	wg.Wait()
}

// Startable participates in the startup phase to initialize values and/or start
// any goroutines that monitor the target cluster during the job run.
type Startable interface {
	StartClusterMonitoring(ctx context.Context, config *rest.Config, recorder monitorapi.RecorderWriter) error
}

// TestDataCollector participates in the data-collection phase to generate
// intervals discovered using the artifacts generated by the tests running on the
// target cluster and data collected by this test during the job run.
type TestDataCollector interface {
	InspectTestArtifacts(ctx context.Context, storageDir string, beginning, end time.Time) (monitorapi.Intervals, []*junitapi.JUnitTestCase, error)
}

// ClusterDataCollector participates in the data-collection phase, immediately
// after TestDataCollector.InspectTestArtifacts, to generate intervals discovered
// by data gained from directly inspecting the target cluster and by data
// collected by this test during the job run.
type ClusterDataCollector interface {
	InspectCluster(ctx context.Context, beginning, end time.Time) (monitorapi.Intervals, []*junitapi.JUnitTestCase, error)
}

// IntervalComputer participates in the interval-computation phase to generate
// intervals discovered by processing intervals generated by all cluster
// monitoring tests during the data-collection phase and by data collected by
// this test during the job run.
type IntervalComputer interface {
	ProcessAggregatedIntervals(ctx context.Context, startingIntervals monitorapi.Intervals, recordedResources monitorapi.ResourcesMap, beginning, end time.Time) (constructedIntervals monitorapi.Intervals, err error)
}

// TestEvaluator participates in the test-evaluation phase, generating junit
// tests after evaluating intervals generated by all cluster monitoring tests
// during the data-collection and interval-computation phases and data collected
// by this test during the job run.
type TestEvaluator interface {
	Evaluate(ctx context.Context, aggregatedIntervals monitorapi.Intervals) ([]*junitapi.JUnitTestCase, error)
}

// StorageContentWriter participates in the serialization stage where artifacts can be output to disk.
type StorageContentWriter interface {
	SaveArtifacts(ctx context.Context, storageDir, timeSuffix string, finalIntervals monitorapi.Intervals, finalResourceState monitorapi.ResourcesMap) error
}

// Stoppable participates in the shutdown phase.
type Stoppable interface {
	StopClusterMonitoring(ctx context.Context) error
}
