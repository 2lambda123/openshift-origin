// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/openshift/origin/pkg/cmd/openshift-operators/controller-operator/apis/controller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenShiftControllerConfigLister helps list OpenShiftControllerConfigs.
type OpenShiftControllerConfigLister interface {
	// List lists all OpenShiftControllerConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.OpenShiftControllerConfig, err error)
	// Get retrieves the OpenShiftControllerConfig from the index for a given name.
	Get(name string) (*v1.OpenShiftControllerConfig, error)
	OpenShiftControllerConfigListerExpansion
}

// openShiftControllerConfigLister implements the OpenShiftControllerConfigLister interface.
type openShiftControllerConfigLister struct {
	indexer cache.Indexer
}

// NewOpenShiftControllerConfigLister returns a new OpenShiftControllerConfigLister.
func NewOpenShiftControllerConfigLister(indexer cache.Indexer) OpenShiftControllerConfigLister {
	return &openShiftControllerConfigLister{indexer: indexer}
}

// List lists all OpenShiftControllerConfigs in the indexer.
func (s *openShiftControllerConfigLister) List(selector labels.Selector) (ret []*v1.OpenShiftControllerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpenShiftControllerConfig))
	})
	return ret, err
}

// Get retrieves the OpenShiftControllerConfig from the index for a given name.
func (s *openShiftControllerConfigLister) Get(name string) (*v1.OpenShiftControllerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("openshiftcontrollerconfig"), name)
	}
	return obj.(*v1.OpenShiftControllerConfig), nil
}
