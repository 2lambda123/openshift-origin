// This file was automatically generated by informer-gen

package v1

import (
	controller_v1 "github.com/openshift/origin/pkg/cmd/openshift-operators/controller-operator/apis/controller/v1"
	versioned "github.com/openshift/origin/pkg/cmd/openshift-operators/controller-operator/generated/clientset/versioned"
	internalinterfaces "github.com/openshift/origin/pkg/cmd/openshift-operators/controller-operator/generated/informers/externalversions/internalinterfaces"
	v1 "github.com/openshift/origin/pkg/cmd/openshift-operators/controller-operator/generated/listers/controller/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// OpenShiftControllerConfigInformer provides access to a shared informer and lister for
// OpenShiftControllerConfigs.
type OpenShiftControllerConfigInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.OpenShiftControllerConfigLister
}

type openShiftControllerConfigInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewOpenShiftControllerConfigInformer constructs a new informer for OpenShiftControllerConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewOpenShiftControllerConfigInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredOpenShiftControllerConfigInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredOpenShiftControllerConfigInformer constructs a new informer for OpenShiftControllerConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredOpenShiftControllerConfigInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ControllerV1().OpenShiftControllerConfigs().List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ControllerV1().OpenShiftControllerConfigs().Watch(options)
			},
		},
		&controller_v1.OpenShiftControllerConfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *openShiftControllerConfigInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredOpenShiftControllerConfigInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *openShiftControllerConfigInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&controller_v1.OpenShiftControllerConfig{}, f.defaultInformer)
}

func (f *openShiftControllerConfigInformer) Lister() v1.OpenShiftControllerConfigLister {
	return v1.NewOpenShiftControllerConfigLister(f.Informer().GetIndexer())
}
