// +build !ignore_autogenerated

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
	unsafe "unsafe"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConditionStatus) DeepCopyInto(out *ConditionStatus) {
	{
		in := (*string)(unsafe.Pointer(in))
		out := (*string)(unsafe.Pointer(out))
		*out = *in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConditionStatus.
func (in *ConditionStatus) DeepCopy() *ConditionStatus {
	if in == nil {
		return nil
	}
	out := new(ConditionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementState) DeepCopyInto(out *ManagementState) {
	{
		in := (*string)(unsafe.Pointer(in))
		out := (*string)(unsafe.Pointer(out))
		*out = *in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementState.
func (in *ManagementState) DeepCopy() *ManagementState {
	if in == nil {
		return nil
	}
	out := new(ManagementState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenShiftOperatorCondition) DeepCopyInto(out *OpenShiftOperatorCondition) {
	*out = *in
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenShiftOperatorCondition.
func (in *OpenShiftOperatorCondition) DeepCopy() *OpenShiftOperatorCondition {
	if in == nil {
		return nil
	}
	out := new(OpenShiftOperatorCondition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenShiftWebConsoleConfig) DeepCopyInto(out *OpenShiftWebConsoleConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenShiftWebConsoleConfig.
func (in *OpenShiftWebConsoleConfig) DeepCopy() *OpenShiftWebConsoleConfig {
	if in == nil {
		return nil
	}
	out := new(OpenShiftWebConsoleConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpenShiftWebConsoleConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenShiftWebConsoleConfigList) DeepCopyInto(out *OpenShiftWebConsoleConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OpenShiftWebConsoleConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenShiftWebConsoleConfigList.
func (in *OpenShiftWebConsoleConfigList) DeepCopy() *OpenShiftWebConsoleConfigList {
	if in == nil {
		return nil
	}
	out := new(OpenShiftWebConsoleConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpenShiftWebConsoleConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenShiftWebConsoleConfigSpec) DeepCopyInto(out *OpenShiftWebConsoleConfigSpec) {
	*out = *in
	in.WebConsoleConfig.DeepCopyInto(&out.WebConsoleConfig)
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenShiftWebConsoleConfigSpec.
func (in *OpenShiftWebConsoleConfigSpec) DeepCopy() *OpenShiftWebConsoleConfigSpec {
	if in == nil {
		return nil
	}
	out := new(OpenShiftWebConsoleConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenShiftWebConsoleConfigStatus) DeepCopyInto(out *OpenShiftWebConsoleConfigStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]OpenShiftOperatorCondition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VersionAvailability != nil {
		in, out := &in.VersionAvailability, &out.VersionAvailability
		*out = make([]WebConsoleVersionAvailablity, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenShiftWebConsoleConfigStatus.
func (in *OpenShiftWebConsoleConfigStatus) DeepCopy() *OpenShiftWebConsoleConfigStatus {
	if in == nil {
		return nil
	}
	out := new(OpenShiftWebConsoleConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebConsoleVersionAvailablity) DeepCopyInto(out *WebConsoleVersionAvailablity) {
	*out = *in
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebConsoleVersionAvailablity.
func (in *WebConsoleVersionAvailablity) DeepCopy() *WebConsoleVersionAvailablity {
	if in == nil {
		return nil
	}
	out := new(WebConsoleVersionAvailablity)
	in.DeepCopyInto(out)
	return out
}
