// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/openshift/origin/pkg/cmd/openshift-operators/orchestration-operator/apis/orchestration/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenShiftOrchestrationConfigLister helps list OpenShiftOrchestrationConfigs.
type OpenShiftOrchestrationConfigLister interface {
	// List lists all OpenShiftOrchestrationConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.OpenShiftOrchestrationConfig, err error)
	// Get retrieves the OpenShiftOrchestrationConfig from the index for a given name.
	Get(name string) (*v1.OpenShiftOrchestrationConfig, error)
	OpenShiftOrchestrationConfigListerExpansion
}

// openShiftOrchestrationConfigLister implements the OpenShiftOrchestrationConfigLister interface.
type openShiftOrchestrationConfigLister struct {
	indexer cache.Indexer
}

// NewOpenShiftOrchestrationConfigLister returns a new OpenShiftOrchestrationConfigLister.
func NewOpenShiftOrchestrationConfigLister(indexer cache.Indexer) OpenShiftOrchestrationConfigLister {
	return &openShiftOrchestrationConfigLister{indexer: indexer}
}

// List lists all OpenShiftOrchestrationConfigs in the indexer.
func (s *openShiftOrchestrationConfigLister) List(selector labels.Selector) (ret []*v1.OpenShiftOrchestrationConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpenShiftOrchestrationConfig))
	})
	return ret, err
}

// Get retrieves the OpenShiftOrchestrationConfig from the index for a given name.
func (s *openShiftOrchestrationConfigLister) Get(name string) (*v1.OpenShiftOrchestrationConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("openshiftorchestrationconfig"), name)
	}
	return obj.(*v1.OpenShiftOrchestrationConfig), nil
}
