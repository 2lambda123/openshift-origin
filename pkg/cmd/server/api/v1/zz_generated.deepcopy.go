// +build !ignore_autogenerated_openshift

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	reflect "reflect"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ActiveDirectoryConfig, InType: reflect.TypeOf(&ActiveDirectoryConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AdmissionConfig, InType: reflect.TypeOf(&AdmissionConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AdmissionPluginConfig, InType: reflect.TypeOf(&AdmissionPluginConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AggregatorConfig, InType: reflect.TypeOf(&AggregatorConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AllowAllPasswordIdentityProvider, InType: reflect.TypeOf(&AllowAllPasswordIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AssetConfig, InType: reflect.TypeOf(&AssetConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AssetExtensionsConfig, InType: reflect.TypeOf(&AssetExtensionsConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AuditConfig, InType: reflect.TypeOf(&AuditConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_AugmentedActiveDirectoryConfig, InType: reflect.TypeOf(&AugmentedActiveDirectoryConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_BasicAuthPasswordIdentityProvider, InType: reflect.TypeOf(&BasicAuthPasswordIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_CertInfo, InType: reflect.TypeOf(&CertInfo{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ClientConnectionOverrides, InType: reflect.TypeOf(&ClientConnectionOverrides{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ControllerConfig, InType: reflect.TypeOf(&ControllerConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ControllerElectionConfig, InType: reflect.TypeOf(&ControllerElectionConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_DNSConfig, InType: reflect.TypeOf(&DNSConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_DefaultAdmissionConfig, InType: reflect.TypeOf(&DefaultAdmissionConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_DenyAllPasswordIdentityProvider, InType: reflect.TypeOf(&DenyAllPasswordIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_DockerConfig, InType: reflect.TypeOf(&DockerConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_EtcdConfig, InType: reflect.TypeOf(&EtcdConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_EtcdConnectionInfo, InType: reflect.TypeOf(&EtcdConnectionInfo{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_EtcdStorageConfig, InType: reflect.TypeOf(&EtcdStorageConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_GitHubIdentityProvider, InType: reflect.TypeOf(&GitHubIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_GitLabIdentityProvider, InType: reflect.TypeOf(&GitLabIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_GoogleIdentityProvider, InType: reflect.TypeOf(&GoogleIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_GrantConfig, InType: reflect.TypeOf(&GrantConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_GroupResource, InType: reflect.TypeOf(&GroupResource{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_HTPasswdPasswordIdentityProvider, InType: reflect.TypeOf(&HTPasswdPasswordIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_HTTPServingInfo, InType: reflect.TypeOf(&HTTPServingInfo{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_IdentityProvider, InType: reflect.TypeOf(&IdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ImageConfig, InType: reflect.TypeOf(&ImageConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ImagePolicyConfig, InType: reflect.TypeOf(&ImagePolicyConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_JenkinsPipelineConfig, InType: reflect.TypeOf(&JenkinsPipelineConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_KeystonePasswordIdentityProvider, InType: reflect.TypeOf(&KeystonePasswordIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_KubeletConnectionInfo, InType: reflect.TypeOf(&KubeletConnectionInfo{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_KubernetesMasterConfig, InType: reflect.TypeOf(&KubernetesMasterConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_LDAPAttributeMapping, InType: reflect.TypeOf(&LDAPAttributeMapping{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_LDAPPasswordIdentityProvider, InType: reflect.TypeOf(&LDAPPasswordIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_LDAPQuery, InType: reflect.TypeOf(&LDAPQuery{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_LDAPSyncConfig, InType: reflect.TypeOf(&LDAPSyncConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_LocalQuota, InType: reflect.TypeOf(&LocalQuota{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_MasterAuthConfig, InType: reflect.TypeOf(&MasterAuthConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_MasterClients, InType: reflect.TypeOf(&MasterClients{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_MasterConfig, InType: reflect.TypeOf(&MasterConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_MasterNetworkConfig, InType: reflect.TypeOf(&MasterNetworkConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_MasterVolumeConfig, InType: reflect.TypeOf(&MasterVolumeConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_NamedCertificate, InType: reflect.TypeOf(&NamedCertificate{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_NodeAuthConfig, InType: reflect.TypeOf(&NodeAuthConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_NodeConfig, InType: reflect.TypeOf(&NodeConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_NodeNetworkConfig, InType: reflect.TypeOf(&NodeNetworkConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_NodeVolumeConfig, InType: reflect.TypeOf(&NodeVolumeConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_OAuthConfig, InType: reflect.TypeOf(&OAuthConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_OAuthTemplates, InType: reflect.TypeOf(&OAuthTemplates{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_OpenIDClaims, InType: reflect.TypeOf(&OpenIDClaims{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_OpenIDIdentityProvider, InType: reflect.TypeOf(&OpenIDIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_OpenIDURLs, InType: reflect.TypeOf(&OpenIDURLs{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodManifestConfig, InType: reflect.TypeOf(&PodManifestConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PolicyConfig, InType: reflect.TypeOf(&PolicyConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ProjectConfig, InType: reflect.TypeOf(&ProjectConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_RFC2307Config, InType: reflect.TypeOf(&RFC2307Config{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_RegistryLocation, InType: reflect.TypeOf(&RegistryLocation{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_RemoteConnectionInfo, InType: reflect.TypeOf(&RemoteConnectionInfo{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_RequestHeaderAuthenticationOptions, InType: reflect.TypeOf(&RequestHeaderAuthenticationOptions{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_RequestHeaderIdentityProvider, InType: reflect.TypeOf(&RequestHeaderIdentityProvider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_RoutingConfig, InType: reflect.TypeOf(&RoutingConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_SecurityAllocator, InType: reflect.TypeOf(&SecurityAllocator{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ServiceAccountConfig, InType: reflect.TypeOf(&ServiceAccountConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ServiceServingCert, InType: reflect.TypeOf(&ServiceServingCert{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ServingInfo, InType: reflect.TypeOf(&ServingInfo{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_SessionConfig, InType: reflect.TypeOf(&SessionConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_SessionSecret, InType: reflect.TypeOf(&SessionSecret{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_SessionSecrets, InType: reflect.TypeOf(&SessionSecrets{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_StringSource, InType: reflect.TypeOf(&StringSource{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_StringSourceSpec, InType: reflect.TypeOf(&StringSourceSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_TemplateServiceBrokerConfig, InType: reflect.TypeOf(&TemplateServiceBrokerConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_TokenConfig, InType: reflect.TypeOf(&TokenConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_UserAgentDenyRule, InType: reflect.TypeOf(&UserAgentDenyRule{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_UserAgentMatchRule, InType: reflect.TypeOf(&UserAgentMatchRule{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_UserAgentMatchingConfig, InType: reflect.TypeOf(&UserAgentMatchingConfig{})},
	)
}

func DeepCopy_v1_ActiveDirectoryConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ActiveDirectoryConfig)
		out := out.(*ActiveDirectoryConfig)
		*out = *in
		if in.UserNameAttributes != nil {
			in, out := &in.UserNameAttributes, &out.UserNameAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.GroupMembershipAttributes != nil {
			in, out := &in.GroupMembershipAttributes, &out.GroupMembershipAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_AdmissionConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AdmissionConfig)
		out := out.(*AdmissionConfig)
		*out = *in
		if in.PluginConfig != nil {
			in, out := &in.PluginConfig, &out.PluginConfig
			*out = make(map[string]AdmissionPluginConfig)
			for key, val := range *in {
				newVal := new(AdmissionPluginConfig)
				if err := DeepCopy_v1_AdmissionPluginConfig(&val, newVal, c); err != nil {
					return err
				}
				(*out)[key] = *newVal
			}
		}
		if in.PluginOrderOverride != nil {
			in, out := &in.PluginOrderOverride, &out.PluginOrderOverride
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_AdmissionPluginConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AdmissionPluginConfig)
		out := out.(*AdmissionPluginConfig)
		*out = *in
		if newVal, err := c.DeepCopy(&in.Configuration); err != nil {
			return err
		} else {
			out.Configuration = *newVal.(*runtime.RawExtension)
		}
		return nil
	}
}

func DeepCopy_v1_AggregatorConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AggregatorConfig)
		out := out.(*AggregatorConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_AllowAllPasswordIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AllowAllPasswordIdentityProvider)
		out := out.(*AllowAllPasswordIdentityProvider)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_AssetConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AssetConfig)
		out := out.(*AssetConfig)
		*out = *in
		if err := DeepCopy_v1_HTTPServingInfo(&in.ServingInfo, &out.ServingInfo, c); err != nil {
			return err
		}
		if in.ExtensionScripts != nil {
			in, out := &in.ExtensionScripts, &out.ExtensionScripts
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.ExtensionProperties != nil {
			in, out := &in.ExtensionProperties, &out.ExtensionProperties
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.ExtensionStylesheets != nil {
			in, out := &in.ExtensionStylesheets, &out.ExtensionStylesheets
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.Extensions != nil {
			in, out := &in.Extensions, &out.Extensions
			*out = make([]AssetExtensionsConfig, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_AssetExtensionsConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AssetExtensionsConfig)
		out := out.(*AssetExtensionsConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_AuditConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AuditConfig)
		out := out.(*AuditConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_AugmentedActiveDirectoryConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*AugmentedActiveDirectoryConfig)
		out := out.(*AugmentedActiveDirectoryConfig)
		*out = *in
		if in.UserNameAttributes != nil {
			in, out := &in.UserNameAttributes, &out.UserNameAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.GroupMembershipAttributes != nil {
			in, out := &in.GroupMembershipAttributes, &out.GroupMembershipAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.GroupNameAttributes != nil {
			in, out := &in.GroupNameAttributes, &out.GroupNameAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_BasicAuthPasswordIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*BasicAuthPasswordIdentityProvider)
		out := out.(*BasicAuthPasswordIdentityProvider)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_CertInfo(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertInfo)
		out := out.(*CertInfo)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_ClientConnectionOverrides(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ClientConnectionOverrides)
		out := out.(*ClientConnectionOverrides)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_ControllerConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ControllerConfig)
		out := out.(*ControllerConfig)
		*out = *in
		if in.Election != nil {
			in, out := &in.Election, &out.Election
			*out = new(ControllerElectionConfig)
			**out = **in
		}
		if err := DeepCopy_v1_ServiceServingCert(&in.ServiceServingCert, &out.ServiceServingCert, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_ControllerElectionConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ControllerElectionConfig)
		out := out.(*ControllerElectionConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_DNSConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*DNSConfig)
		out := out.(*DNSConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_DefaultAdmissionConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*DefaultAdmissionConfig)
		out := out.(*DefaultAdmissionConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_DenyAllPasswordIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*DenyAllPasswordIdentityProvider)
		out := out.(*DenyAllPasswordIdentityProvider)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_DockerConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*DockerConfig)
		out := out.(*DockerConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_EtcdConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*EtcdConfig)
		out := out.(*EtcdConfig)
		*out = *in
		if err := DeepCopy_v1_ServingInfo(&in.ServingInfo, &out.ServingInfo, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_ServingInfo(&in.PeerServingInfo, &out.PeerServingInfo, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_EtcdConnectionInfo(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*EtcdConnectionInfo)
		out := out.(*EtcdConnectionInfo)
		*out = *in
		if in.URLs != nil {
			in, out := &in.URLs, &out.URLs
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_EtcdStorageConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*EtcdStorageConfig)
		out := out.(*EtcdStorageConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_GitHubIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GitHubIdentityProvider)
		out := out.(*GitHubIdentityProvider)
		*out = *in
		if in.Organizations != nil {
			in, out := &in.Organizations, &out.Organizations
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.Teams != nil {
			in, out := &in.Teams, &out.Teams
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_GitLabIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GitLabIdentityProvider)
		out := out.(*GitLabIdentityProvider)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_GoogleIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GoogleIdentityProvider)
		out := out.(*GoogleIdentityProvider)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_GrantConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GrantConfig)
		out := out.(*GrantConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_GroupResource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupResource)
		out := out.(*GroupResource)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_HTPasswdPasswordIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*HTPasswdPasswordIdentityProvider)
		out := out.(*HTPasswdPasswordIdentityProvider)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_HTTPServingInfo(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*HTTPServingInfo)
		out := out.(*HTTPServingInfo)
		*out = *in
		if err := DeepCopy_v1_ServingInfo(&in.ServingInfo, &out.ServingInfo, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_IdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*IdentityProvider)
		out := out.(*IdentityProvider)
		*out = *in
		if newVal, err := c.DeepCopy(&in.Provider); err != nil {
			return err
		} else {
			out.Provider = *newVal.(*runtime.RawExtension)
		}
		return nil
	}
}

func DeepCopy_v1_ImageConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ImageConfig)
		out := out.(*ImageConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_ImagePolicyConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ImagePolicyConfig)
		out := out.(*ImagePolicyConfig)
		*out = *in
		if in.AllowedRegistriesForImport != nil {
			in, out := &in.AllowedRegistriesForImport, &out.AllowedRegistriesForImport
			if newVal, err := c.DeepCopy(*in); err != nil {
				return err
			} else {
				*out = newVal.(*AllowedRegistries)
			}
		}
		return nil
	}
}

func DeepCopy_v1_JenkinsPipelineConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*JenkinsPipelineConfig)
		out := out.(*JenkinsPipelineConfig)
		*out = *in
		if in.AutoProvisionEnabled != nil {
			in, out := &in.AutoProvisionEnabled, &out.AutoProvisionEnabled
			*out = new(bool)
			**out = **in
		}
		if in.Parameters != nil {
			in, out := &in.Parameters, &out.Parameters
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		return nil
	}
}

func DeepCopy_v1_KeystonePasswordIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*KeystonePasswordIdentityProvider)
		out := out.(*KeystonePasswordIdentityProvider)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_KubeletConnectionInfo(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*KubeletConnectionInfo)
		out := out.(*KubeletConnectionInfo)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_KubernetesMasterConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*KubernetesMasterConfig)
		out := out.(*KubernetesMasterConfig)
		*out = *in
		if in.APILevels != nil {
			in, out := &in.APILevels, &out.APILevels
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.DisabledAPIGroupVersions != nil {
			in, out := &in.DisabledAPIGroupVersions, &out.DisabledAPIGroupVersions
			*out = make(map[string][]string)
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*[]string)
				}
			}
		}
		if in.StaticNodeNames != nil {
			in, out := &in.StaticNodeNames, &out.StaticNodeNames
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if err := DeepCopy_v1_AdmissionConfig(&in.AdmissionConfig, &out.AdmissionConfig, c); err != nil {
			return err
		}
		if in.APIServerArguments != nil {
			in, out := &in.APIServerArguments, &out.APIServerArguments
			*out = make(ExtendedArguments)
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*[]string)
				}
			}
		}
		if in.ControllerArguments != nil {
			in, out := &in.ControllerArguments, &out.ControllerArguments
			*out = make(ExtendedArguments)
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*[]string)
				}
			}
		}
		if in.SchedulerArguments != nil {
			in, out := &in.SchedulerArguments, &out.SchedulerArguments
			*out = make(ExtendedArguments)
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*[]string)
				}
			}
		}
		return nil
	}
}

func DeepCopy_v1_LDAPAttributeMapping(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LDAPAttributeMapping)
		out := out.(*LDAPAttributeMapping)
		*out = *in
		if in.ID != nil {
			in, out := &in.ID, &out.ID
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.PreferredUsername != nil {
			in, out := &in.PreferredUsername, &out.PreferredUsername
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.Name != nil {
			in, out := &in.Name, &out.Name
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.Email != nil {
			in, out := &in.Email, &out.Email
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_LDAPPasswordIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LDAPPasswordIdentityProvider)
		out := out.(*LDAPPasswordIdentityProvider)
		*out = *in
		if err := DeepCopy_v1_LDAPAttributeMapping(&in.Attributes, &out.Attributes, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_LDAPQuery(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LDAPQuery)
		out := out.(*LDAPQuery)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_LDAPSyncConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LDAPSyncConfig)
		out := out.(*LDAPSyncConfig)
		*out = *in
		if in.LDAPGroupUIDToOpenShiftGroupNameMapping != nil {
			in, out := &in.LDAPGroupUIDToOpenShiftGroupNameMapping, &out.LDAPGroupUIDToOpenShiftGroupNameMapping
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.RFC2307Config != nil {
			in, out := &in.RFC2307Config, &out.RFC2307Config
			*out = new(RFC2307Config)
			if err := DeepCopy_v1_RFC2307Config(*in, *out, c); err != nil {
				return err
			}
		}
		if in.ActiveDirectoryConfig != nil {
			in, out := &in.ActiveDirectoryConfig, &out.ActiveDirectoryConfig
			*out = new(ActiveDirectoryConfig)
			if err := DeepCopy_v1_ActiveDirectoryConfig(*in, *out, c); err != nil {
				return err
			}
		}
		if in.AugmentedActiveDirectoryConfig != nil {
			in, out := &in.AugmentedActiveDirectoryConfig, &out.AugmentedActiveDirectoryConfig
			*out = new(AugmentedActiveDirectoryConfig)
			if err := DeepCopy_v1_AugmentedActiveDirectoryConfig(*in, *out, c); err != nil {
				return err
			}
		}
		return nil
	}
}

func DeepCopy_v1_LocalQuota(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LocalQuota)
		out := out.(*LocalQuota)
		*out = *in
		if in.PerFSGroup != nil {
			in, out := &in.PerFSGroup, &out.PerFSGroup
			*out = new(resource.Quantity)
			**out = (*in).DeepCopy()
		}
		return nil
	}
}

func DeepCopy_v1_MasterAuthConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*MasterAuthConfig)
		out := out.(*MasterAuthConfig)
		*out = *in
		if in.RequestHeader != nil {
			in, out := &in.RequestHeader, &out.RequestHeader
			*out = new(RequestHeaderAuthenticationOptions)
			if err := DeepCopy_v1_RequestHeaderAuthenticationOptions(*in, *out, c); err != nil {
				return err
			}
		}
		return nil
	}
}

func DeepCopy_v1_MasterClients(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*MasterClients)
		out := out.(*MasterClients)
		*out = *in
		if in.OpenShiftLoopbackClientConnectionOverrides != nil {
			in, out := &in.OpenShiftLoopbackClientConnectionOverrides, &out.OpenShiftLoopbackClientConnectionOverrides
			*out = new(ClientConnectionOverrides)
			**out = **in
		}
		if in.ExternalKubernetesClientConnectionOverrides != nil {
			in, out := &in.ExternalKubernetesClientConnectionOverrides, &out.ExternalKubernetesClientConnectionOverrides
			*out = new(ClientConnectionOverrides)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1_MasterConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*MasterConfig)
		out := out.(*MasterConfig)
		*out = *in
		if err := DeepCopy_v1_HTTPServingInfo(&in.ServingInfo, &out.ServingInfo, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_MasterAuthConfig(&in.AuthConfig, &out.AuthConfig, c); err != nil {
			return err
		}
		if in.CORSAllowedOrigins != nil {
			in, out := &in.CORSAllowedOrigins, &out.CORSAllowedOrigins
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.APILevels != nil {
			in, out := &in.APILevels, &out.APILevels
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if err := DeepCopy_v1_AdmissionConfig(&in.AdmissionConfig, &out.AdmissionConfig, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_ControllerConfig(&in.ControllerConfig, &out.ControllerConfig, c); err != nil {
			return err
		}
		if in.DisabledFeatures != nil {
			in, out := &in.DisabledFeatures, &out.DisabledFeatures
			*out = make(FeatureList, len(*in))
			copy(*out, *in)
		}
		if err := DeepCopy_v1_EtcdConnectionInfo(&in.EtcdClientInfo, &out.EtcdClientInfo, c); err != nil {
			return err
		}
		if in.KubernetesMasterConfig != nil {
			in, out := &in.KubernetesMasterConfig, &out.KubernetesMasterConfig
			*out = new(KubernetesMasterConfig)
			if err := DeepCopy_v1_KubernetesMasterConfig(*in, *out, c); err != nil {
				return err
			}
		}
		if in.EtcdConfig != nil {
			in, out := &in.EtcdConfig, &out.EtcdConfig
			*out = new(EtcdConfig)
			if err := DeepCopy_v1_EtcdConfig(*in, *out, c); err != nil {
				return err
			}
		}
		if in.OAuthConfig != nil {
			in, out := &in.OAuthConfig, &out.OAuthConfig
			*out = new(OAuthConfig)
			if err := DeepCopy_v1_OAuthConfig(*in, *out, c); err != nil {
				return err
			}
		}
		if in.AssetConfig != nil {
			in, out := &in.AssetConfig, &out.AssetConfig
			*out = new(AssetConfig)
			if err := DeepCopy_v1_AssetConfig(*in, *out, c); err != nil {
				return err
			}
		}
		if in.DNSConfig != nil {
			in, out := &in.DNSConfig, &out.DNSConfig
			*out = new(DNSConfig)
			**out = **in
		}
		if err := DeepCopy_v1_ServiceAccountConfig(&in.ServiceAccountConfig, &out.ServiceAccountConfig, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_MasterClients(&in.MasterClients, &out.MasterClients, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_ImagePolicyConfig(&in.ImagePolicyConfig, &out.ImagePolicyConfig, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_PolicyConfig(&in.PolicyConfig, &out.PolicyConfig, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_ProjectConfig(&in.ProjectConfig, &out.ProjectConfig, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_MasterNetworkConfig(&in.NetworkConfig, &out.NetworkConfig, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_MasterVolumeConfig(&in.VolumeConfig, &out.VolumeConfig, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_JenkinsPipelineConfig(&in.JenkinsPipelineConfig, &out.JenkinsPipelineConfig, c); err != nil {
			return err
		}
		if in.TemplateServiceBrokerConfig != nil {
			in, out := &in.TemplateServiceBrokerConfig, &out.TemplateServiceBrokerConfig
			*out = new(TemplateServiceBrokerConfig)
			if err := DeepCopy_v1_TemplateServiceBrokerConfig(*in, *out, c); err != nil {
				return err
			}
		}
		return nil
	}
}

func DeepCopy_v1_MasterNetworkConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*MasterNetworkConfig)
		out := out.(*MasterNetworkConfig)
		*out = *in
		if in.ExternalIPNetworkCIDRs != nil {
			in, out := &in.ExternalIPNetworkCIDRs, &out.ExternalIPNetworkCIDRs
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_MasterVolumeConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*MasterVolumeConfig)
		out := out.(*MasterVolumeConfig)
		*out = *in
		if in.DynamicProvisioningEnabled != nil {
			in, out := &in.DynamicProvisioningEnabled, &out.DynamicProvisioningEnabled
			*out = new(bool)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1_NamedCertificate(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NamedCertificate)
		out := out.(*NamedCertificate)
		*out = *in
		if in.Names != nil {
			in, out := &in.Names, &out.Names
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_NodeAuthConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NodeAuthConfig)
		out := out.(*NodeAuthConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_NodeConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NodeConfig)
		out := out.(*NodeConfig)
		*out = *in
		if err := DeepCopy_v1_ServingInfo(&in.ServingInfo, &out.ServingInfo, c); err != nil {
			return err
		}
		if in.MasterClientConnectionOverrides != nil {
			in, out := &in.MasterClientConnectionOverrides, &out.MasterClientConnectionOverrides
			*out = new(ClientConnectionOverrides)
			**out = **in
		}
		if in.DNSNameservers != nil {
			in, out := &in.DNSNameservers, &out.DNSNameservers
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.PodManifestConfig != nil {
			in, out := &in.PodManifestConfig, &out.PodManifestConfig
			*out = new(PodManifestConfig)
			**out = **in
		}
		if in.KubeletArguments != nil {
			in, out := &in.KubeletArguments, &out.KubeletArguments
			*out = make(ExtendedArguments)
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*[]string)
				}
			}
		}
		if in.ProxyArguments != nil {
			in, out := &in.ProxyArguments, &out.ProxyArguments
			*out = make(ExtendedArguments)
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*[]string)
				}
			}
		}
		if in.EnableUnidling != nil {
			in, out := &in.EnableUnidling, &out.EnableUnidling
			*out = new(bool)
			**out = **in
		}
		if err := DeepCopy_v1_NodeVolumeConfig(&in.VolumeConfig, &out.VolumeConfig, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_NodeNetworkConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NodeNetworkConfig)
		out := out.(*NodeNetworkConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_NodeVolumeConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NodeVolumeConfig)
		out := out.(*NodeVolumeConfig)
		*out = *in
		if err := DeepCopy_v1_LocalQuota(&in.LocalQuota, &out.LocalQuota, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_OAuthConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*OAuthConfig)
		out := out.(*OAuthConfig)
		*out = *in
		if in.MasterCA != nil {
			in, out := &in.MasterCA, &out.MasterCA
			*out = new(string)
			**out = **in
		}
		if in.IdentityProviders != nil {
			in, out := &in.IdentityProviders, &out.IdentityProviders
			*out = make([]IdentityProvider, len(*in))
			for i := range *in {
				if err := DeepCopy_v1_IdentityProvider(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		if in.SessionConfig != nil {
			in, out := &in.SessionConfig, &out.SessionConfig
			*out = new(SessionConfig)
			**out = **in
		}
		if in.Templates != nil {
			in, out := &in.Templates, &out.Templates
			*out = new(OAuthTemplates)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1_OAuthTemplates(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*OAuthTemplates)
		out := out.(*OAuthTemplates)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_OpenIDClaims(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*OpenIDClaims)
		out := out.(*OpenIDClaims)
		*out = *in
		if in.ID != nil {
			in, out := &in.ID, &out.ID
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.PreferredUsername != nil {
			in, out := &in.PreferredUsername, &out.PreferredUsername
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.Name != nil {
			in, out := &in.Name, &out.Name
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.Email != nil {
			in, out := &in.Email, &out.Email
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_OpenIDIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*OpenIDIdentityProvider)
		out := out.(*OpenIDIdentityProvider)
		*out = *in
		if in.ExtraScopes != nil {
			in, out := &in.ExtraScopes, &out.ExtraScopes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.ExtraAuthorizeParameters != nil {
			in, out := &in.ExtraAuthorizeParameters, &out.ExtraAuthorizeParameters
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if err := DeepCopy_v1_OpenIDClaims(&in.Claims, &out.Claims, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_OpenIDURLs(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*OpenIDURLs)
		out := out.(*OpenIDURLs)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_PodManifestConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodManifestConfig)
		out := out.(*PodManifestConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_PolicyConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PolicyConfig)
		out := out.(*PolicyConfig)
		*out = *in
		if err := DeepCopy_v1_UserAgentMatchingConfig(&in.UserAgentMatchingConfig, &out.UserAgentMatchingConfig, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_ProjectConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ProjectConfig)
		out := out.(*ProjectConfig)
		*out = *in
		if in.SecurityAllocator != nil {
			in, out := &in.SecurityAllocator, &out.SecurityAllocator
			*out = new(SecurityAllocator)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1_RFC2307Config(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RFC2307Config)
		out := out.(*RFC2307Config)
		*out = *in
		if in.GroupNameAttributes != nil {
			in, out := &in.GroupNameAttributes, &out.GroupNameAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.GroupMembershipAttributes != nil {
			in, out := &in.GroupMembershipAttributes, &out.GroupMembershipAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.UserNameAttributes != nil {
			in, out := &in.UserNameAttributes, &out.UserNameAttributes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_RegistryLocation(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RegistryLocation)
		out := out.(*RegistryLocation)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_RemoteConnectionInfo(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RemoteConnectionInfo)
		out := out.(*RemoteConnectionInfo)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_RequestHeaderAuthenticationOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RequestHeaderAuthenticationOptions)
		out := out.(*RequestHeaderAuthenticationOptions)
		*out = *in
		if in.ClientCommonNames != nil {
			in, out := &in.ClientCommonNames, &out.ClientCommonNames
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.UsernameHeaders != nil {
			in, out := &in.UsernameHeaders, &out.UsernameHeaders
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.GroupHeaders != nil {
			in, out := &in.GroupHeaders, &out.GroupHeaders
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.ExtraHeaderPrefixes != nil {
			in, out := &in.ExtraHeaderPrefixes, &out.ExtraHeaderPrefixes
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_RequestHeaderIdentityProvider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RequestHeaderIdentityProvider)
		out := out.(*RequestHeaderIdentityProvider)
		*out = *in
		if in.ClientCommonNames != nil {
			in, out := &in.ClientCommonNames, &out.ClientCommonNames
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.Headers != nil {
			in, out := &in.Headers, &out.Headers
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.PreferredUsernameHeaders != nil {
			in, out := &in.PreferredUsernameHeaders, &out.PreferredUsernameHeaders
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.NameHeaders != nil {
			in, out := &in.NameHeaders, &out.NameHeaders
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.EmailHeaders != nil {
			in, out := &in.EmailHeaders, &out.EmailHeaders
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_RoutingConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RoutingConfig)
		out := out.(*RoutingConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_SecurityAllocator(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*SecurityAllocator)
		out := out.(*SecurityAllocator)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_ServiceAccountConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ServiceAccountConfig)
		out := out.(*ServiceAccountConfig)
		*out = *in
		if in.ManagedNames != nil {
			in, out := &in.ManagedNames, &out.ManagedNames
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.PublicKeyFiles != nil {
			in, out := &in.PublicKeyFiles, &out.PublicKeyFiles
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_ServiceServingCert(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ServiceServingCert)
		out := out.(*ServiceServingCert)
		*out = *in
		if in.Signer != nil {
			in, out := &in.Signer, &out.Signer
			*out = new(CertInfo)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1_ServingInfo(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ServingInfo)
		out := out.(*ServingInfo)
		*out = *in
		if in.NamedCertificates != nil {
			in, out := &in.NamedCertificates, &out.NamedCertificates
			*out = make([]NamedCertificate, len(*in))
			for i := range *in {
				if err := DeepCopy_v1_NamedCertificate(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		if in.CipherSuites != nil {
			in, out := &in.CipherSuites, &out.CipherSuites
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_SessionConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*SessionConfig)
		out := out.(*SessionConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_SessionSecret(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*SessionSecret)
		out := out.(*SessionSecret)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_SessionSecrets(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*SessionSecrets)
		out := out.(*SessionSecrets)
		*out = *in
		if in.Secrets != nil {
			in, out := &in.Secrets, &out.Secrets
			*out = make([]SessionSecret, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_StringSource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*StringSource)
		out := out.(*StringSource)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_StringSourceSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*StringSourceSpec)
		out := out.(*StringSourceSpec)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_TemplateServiceBrokerConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TemplateServiceBrokerConfig)
		out := out.(*TemplateServiceBrokerConfig)
		*out = *in
		if in.TemplateNamespaces != nil {
			in, out := &in.TemplateNamespaces, &out.TemplateNamespaces
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_TokenConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TokenConfig)
		out := out.(*TokenConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_UserAgentDenyRule(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserAgentDenyRule)
		out := out.(*UserAgentDenyRule)
		*out = *in
		if err := DeepCopy_v1_UserAgentMatchRule(&in.UserAgentMatchRule, &out.UserAgentMatchRule, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_UserAgentMatchRule(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserAgentMatchRule)
		out := out.(*UserAgentMatchRule)
		*out = *in
		if in.HTTPVerbs != nil {
			in, out := &in.HTTPVerbs, &out.HTTPVerbs
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1_UserAgentMatchingConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserAgentMatchingConfig)
		out := out.(*UserAgentMatchingConfig)
		*out = *in
		if in.RequiredClients != nil {
			in, out := &in.RequiredClients, &out.RequiredClients
			*out = make([]UserAgentMatchRule, len(*in))
			for i := range *in {
				if err := DeepCopy_v1_UserAgentMatchRule(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		if in.DeniedClients != nil {
			in, out := &in.DeniedClients, &out.DeniedClients
			*out = make([]UserAgentDenyRule, len(*in))
			for i := range *in {
				if err := DeepCopy_v1_UserAgentDenyRule(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		return nil
	}
}
