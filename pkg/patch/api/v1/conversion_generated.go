// +build !ignore_autogenerated

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1

import (
	patch_api "github.com/openshift/origin/pkg/patch/api"
	api "k8s.io/kubernetes/pkg/api"
	conversion "k8s.io/kubernetes/pkg/conversion"
	reflect "reflect"
)

func init() {
	if err := api.Scheme.AddGeneratedConversionFuncs(
		Convert_v1_PatchSpec_To_api_PatchSpec,
		Convert_api_PatchSpec_To_v1_PatchSpec,
	); err != nil {
		// if one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}

func autoConvert_v1_PatchSpec_To_api_PatchSpec(in *PatchSpec, out *patch_api.PatchSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*PatchSpec))(in)
	}
	out.TargetGroup = in.TargetGroup
	out.TargetVersion = in.TargetVersion
	out.TargetResource = in.TargetResource
	out.TargetNamespace = in.TargetNamespace
	out.TargetName = in.TargetName
	out.Type = patch_api.PatchType(in.Type)
	out.Patch = in.Patch
	return nil
}

func Convert_v1_PatchSpec_To_api_PatchSpec(in *PatchSpec, out *patch_api.PatchSpec, s conversion.Scope) error {
	return autoConvert_v1_PatchSpec_To_api_PatchSpec(in, out, s)
}

func autoConvert_api_PatchSpec_To_v1_PatchSpec(in *patch_api.PatchSpec, out *PatchSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*patch_api.PatchSpec))(in)
	}
	out.TargetGroup = in.TargetGroup
	out.TargetVersion = in.TargetVersion
	out.TargetResource = in.TargetResource
	out.TargetNamespace = in.TargetNamespace
	out.TargetName = in.TargetName
	out.Type = PatchType(in.Type)
	out.Patch = in.Patch
	return nil
}

func Convert_api_PatchSpec_To_v1_PatchSpec(in *patch_api.PatchSpec, out *PatchSpec, s conversion.Scope) error {
	return autoConvert_api_PatchSpec_To_v1_PatchSpec(in, out, s)
}
