package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_AccessRestriction = map[string]string{
	"":         "AccessRestriction is used to guard specific actions without invasive changes to the cluster's default RBAC policy. It supports a required blacklist based restriction with an optional whitelist opt-out. It never grants any privileges - it can only be used to take privileges away.",
	"metadata": "Standard object's metadata.",
	"spec":     "Spec defines when this restriction is imposed and how to satisfy it.",
}

func (AccessRestriction) SwaggerDoc() map[string]string {
	return map_AccessRestriction
}

var map_AccessRestrictionList = map[string]string{
	"":         "AccessRestrictionList is a collection of AccessRestrictions",
	"metadata": "Standard object's metadata.",
	"items":    "Items is a list of AccessRestriction objects.",
}

func (AccessRestrictionList) SwaggerDoc() map[string]string {
	return map_AccessRestrictionList
}

var map_AccessRestrictionSpec = map[string]string{
	"":                "AccessRestrictionSpec holds the matching requirements. MatchAttributes and DeniedSubjects (blacklist) are required. AllowedSubjects (whitelist) may optionally be specified.",
	"matchAttributes": "If these rules cover the current request, then this restriction applies. If AllowedSubjects is set, those subjects can perform the matching actions even if they exist in DeniedSubjects. The subjects in DeniedSubjects are restricted from performing the matching actions unless they exist in AllowedSubjects. If the subject does not exist in either AllowedSubjects or DeniedSubjects, then this authorizer has no opinion on the request. Required.",
	"allowedSubjects": "The whitelist of subjects that are allowed to perform the actions defined by MatchAttributes. This list has priority over DeniedSubjects.  Thus DeniedSubjects is ignored if the subject exists in this list. Note that this only prevents a denial due to the access restriction. The subject must still have a matching RBAC binding to actually perform the current action. Optional.",
	"deniedSubjects":  "The blacklist of subjects that are not allowed to perform the actions defined by MatchAttributes. AllowedSubjects has priority over this list.  It is ignored if the subject exists in AllowedSubjects. This restriction is processed before all RBAC data, and thus will reject actions that RBAC may otherwise permit. Required.",
}

func (AccessRestrictionSpec) SwaggerDoc() map[string]string {
	return map_AccessRestrictionSpec
}

var map_SubjectMatcher = map[string]string{
	"":                 "SubjectMatcher defines how an access restriction matches against the current user or service account or group. Exactly one field must be non-nil.",
	"userRestriction":  "UserRestriction matches against user or service account subjects. Use system:serviceaccount:NAMESPACE:NAME to target a specific service account.",
	"groupRestriction": "GroupRestriction matches against group subjects. Use system:serviceaccount:NAMESPACE to target all service accounts in a specific namespace. Use system:serviceaccounts to target all service accounts.",
}

func (SubjectMatcher) SwaggerDoc() map[string]string {
	return map_SubjectMatcher
}

// AUTO-GENERATED FUNCTIONS END HERE
