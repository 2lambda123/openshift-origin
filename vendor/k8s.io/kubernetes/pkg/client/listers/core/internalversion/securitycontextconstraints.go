/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	"k8s.io/apimachinery/pkg/api/errors"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	api "k8s.io/kubernetes/pkg/api"
)

// SecurityContextConstraintsLister helps list SecurityContextConstraints.
type SecurityContextConstraintsLister interface {
	// List lists all SecurityContextConstraints in the indexer.
	List(selector labels.Selector) (ret []*api.SecurityContextConstraints, err error)
	// Get retrieves the SecurityContextConstraints from the index for a given name.
	Get(name string) (*api.SecurityContextConstraints, error)
	SecurityContextConstraintsListerExpansion
}

// securityContextConstraintsLister implements the SecurityContextConstraintsLister interface.
type securityContextConstraintsLister struct {
	indexer cache.Indexer
}

// NewSecurityContextConstraintsLister returns a new SecurityContextConstraintsLister.
func NewSecurityContextConstraintsLister(indexer cache.Indexer) SecurityContextConstraintsLister {
	return &securityContextConstraintsLister{indexer: indexer}
}

// List lists all SecurityContextConstraints in the indexer.
func (s *securityContextConstraintsLister) List(selector labels.Selector) (ret []*api.SecurityContextConstraints, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*api.SecurityContextConstraints))
	})
	return ret, err
}

// Get retrieves the SecurityContextConstraints from the index for a given name.
func (s *securityContextConstraintsLister) Get(name string) (*api.SecurityContextConstraints, error) {
	key := &api.SecurityContextConstraints{ObjectMeta: v1.ObjectMeta{Name: name}}
	obj, exists, err := s.indexer.Get(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(api.Resource("securitycontextconstraints"), name)
	}
	return obj.(*api.SecurityContextConstraints), nil
}
