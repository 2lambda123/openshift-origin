apiVersion: v1
kind: Template
parameters:
- name: HAPROXY_IMAGE
  value: haproxy:2.0
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: h2spec-haproxy-config
  data:
    haproxy.config: |
      global
        daemon
        log stdout local0
        nbthread 4
        tune.ssl.default-dh-param 2048
        tune.ssl.capture-cipherlist-size 1
      defaults
        mode http
        timeout connect 5s
        timeout client 30s
        timeout client-fin 1s
        timeout server 30s
        timeout server-fin 1s
        timeout http-request 10s
        timeout http-keep-alive 300s
        option httplog
        option http-use-htx
        option logasap
        option http-buffer-request
        log-format "frontend:%f/%H/%fi:%fp GMT:%T\ body:%[capture.req.hdr(0)]\  request:%r"
      frontend fe_proxy
        declare capture request len 40000
        http-request capture req.body id 0
        log global
        bind *:8080 alpn h2
        default_backend haproxy-availability-ok
      frontend fe_proxy_tls
        declare capture request len 40000
        http-request capture req.body id 0
        log global
        bind *:8443 ssl crt /tmp/bundle.pem alpn h2
        default_backend haproxy-availability-ok
      backend haproxy-availability-ok
        errorfile 200 /etc/haproxy/errorfile
        http-request deny deny_status 200
    errorfile: |
      HTTP/1.0 200 OK
      Cache-Control: no-cache
      Connection: close
      Content-Type: text/html

      <html>
      <body>
      The way this errorfile works is summarized in this post:
          https://www.gilesorr.com/blog/haproxy-static-content.html
      And based on this discussion we need to return some data on GET requests:
          https://www.mail-archive.com/haproxy@formilux.org/msg36762.html
      Generated content comes from: $ base64 /dev/urandom | head -c 4k
      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
      ykvHjLw+2KatoB7v7qVoN/GLsHsMij
      </body>
      </html>
- apiVersion: v1
  kind: Pod
  metadata:
    name: h2spec-haproxy
    labels:
      app: h2spec-haproxy
  spec:
    containers:
    - image: ${HAPROXY_IMAGE}
      name: serve
      command: ["/bin/bash", "-c" ]
      args:
        - set -e;
          cat /etc/service-certs/tls.key /etc/service-certs/tls.crt > /tmp/bundle.pem;
          haproxy -f /etc/haproxy/haproxy.config -db
      ports:
      - containerPort: 8443
        protocol: TCP
      - containerPort: 8080
        protocol: TCP
      volumeMounts:
      - name: service-certs
        mountPath: /etc/service-certs
      - name: config
        mountPath: /etc/haproxy
      - name: tmp
        mountPath: /var/cache/haproxy
      - name: tmp
        mountPath: /var/run
    volumes:
    - name: config
      configMap:
        name: h2spec-haproxy-config
    - name: service-certs
      secret:
        secretName: service-certs
    - name: tmp
      emptyDir: {}
    - name: tmp2
      emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: h2spec-haproxy
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: service-certs
  spec:
    selector:
      app: h2spec-haproxy
    ports:
      - port: 443
        name: https
        targetPort: 8443
        protocol: TCP
      - port: 80
        name: http
        targetPort: 8080
        protocol: TCP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: h2spec-haproxy
    name: h2spec-haproxy-edge
  spec:
    port:
      targetPort: 8080
    tls:
      termination: edge
    to:
      kind: Service
      name: h2spec-haproxy
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: h2spec-haproxy
    name: h2spec-haproxy-reencrypt
  spec:
    port:
      targetPort: 8443
    tls:
      termination: reencrypt
    to:
      kind: Service
      name: h2spec-haproxy
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: h2spec-haproxy
    name: h2spec-haproxy-passthrough
  spec:
    port:
      targetPort: 8443
    tls:
      termination: passthrough
    to:
      kind: Service
      name: h2spec-haproxy
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Pod
  metadata:
    name: h2spec
    labels:
      app: h2spec
  spec:
    containers:
    - name: h2spec
      image: docker.io/summerwind/h2spec:2.4.0
      command: ["/bin/bash"]
      args: ["-c", "while true; do echo -n 'heartbeat: '; date; sleep 60; done"]
